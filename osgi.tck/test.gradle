/*
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0 
 */

/*
 * osgi.tck Gradle test execution script
 */

tasks.addRule('Pattern: preptck.<name>: Prepare the TCK for <name>.') { taskName ->
  if (taskName.startsWith('preptck.')) {
    tasks.create(taskName) {
      ext.book = taskName - 'preptck.'
      description "Prepare the TCK for ${book}."
      group 'verification'
      ext.destinationDirectory = project.objects.directoryProperty().value(project.layout.buildDirectory.dir("osgi.tck.${book}"))
      inputs.files fileTree(riBuildDir).include('osgi.ri.core.jar', "osgi.ri.${book}.jar")
      inputs.files project.layout.buildDirectory.file("osgi.tck.${book}.jar")
      doFirst {
        project.delete(destinationDirectory)
        project.mkdir(destinationDirectory)
      }
      doLast {
        inputs.files.each { jar ->
          copy {
            from zipTree(jar)
            into destinationDirectory
          }
        }
      }
    }
  }
}

tasks.addRule('Pattern: tck.<name>: Run the TCK for <name>.') { taskName ->
  if (taskName.startsWith('tck.')) {
    def book = taskName - 'tck.'
    def destinationDirectory = project.objects.directoryProperty().value(project.layout.buildDirectory.dir("osgi.tck.${book}"))
    def tcks = zipTree(project.layout.buildDirectory.file("osgi.tck.${book}.jar")).matching {
      include '*.bnd'
    }
    def tcktask = tasks.create(taskName) {
      description "Run the TCK for ${book}."
      group 'verification'
    }
    tcks.forEach { bndFile ->
      def bndName = bndFile.name - '.bnd'
      tcktask.dependsOn tasks.create("${taskName}.${bndName}") {
        description "Run the ${bndName} TCK for ${book}."
        group 'verification'
        dependsOn tasks.named("preptck.${book}")
        doLast {
          javaexec {
            errorOutput = standardOutput // send stderr to stdout
            workingDir file(destinationDirectory)
            main = '-jar' // first arg must be the bnd jar
            args file(destinationDirectory.file('jar/bnd.jar'))
            args '--exceptions'
            args 'runtests'
            args '--title', name
            args '--reportdir', "reports/${bndName}"
            args bndFile.name
          }.assertNormalExitValue()
        }
      }
    }
  }
}
