/*
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0 
 */

/*
 * osgi.tck Gradle test execution script
 */

interface Injected {
	@Inject ExecOperations getExec()
	@Inject FileSystemOperations getFs()
	@Inject ArchiveOperations getArchive()
}

tasks.addRule('Pattern: preptck.<name>: Prepare the TCK for <name>.') { taskName ->
	if (taskName.startsWith('preptck.')) {
		tasks.create(taskName) {
			def book = taskName - 'preptck.'
			description = "Prepare the TCK for ${book}."
			group = 'verification'
			def jars = objects.fileCollection()
			jars.from(fileTree(implBuildDir).include('osgi.impl.core.jar', "osgi.impl.${book}.jar"))
			jars.from(layout.buildDirectory.file("osgi.tck.${book}.jar"))
			inputs.files(jars).withPropertyName('jars')
			def injected = objects.newInstance(Injected)
			def destinationDirectory = layout.buildDirectory.dir("osgi.tck.${book}")
			def outputFiles = objects.fileTree().from(destinationDirectory)
			doFirst('clean') { t ->
				injected.fs.delete {
					delete outputFiles
				}
			}
			doLast('prep') { t ->
				jars.forEach { jar ->
					injected.fs.copy {
						from injected.archive.zipTree(jar)
						into destinationDirectory
					}
				}
			}
		}
	}
}

tasks.addRule('Pattern: tck.<name>: Run the TCK for <name>.') { taskName ->
	if (taskName.startsWith('tck.')) {
		def book = taskName - 'tck.'
		def destinationDirectory = objects.directoryProperty().value(layout.buildDirectory.dir("osgi.tck.${book}"))
		def bndjar = destinationDirectory.file('jar/bnd.jar')
		def tcks = zipTree(layout.buildDirectory.file("osgi.tck.${book}.jar")).matching {
			include('*.bnd')
		}
		def tcktask = tasks.create(taskName) {
			description = "Run the TCK for ${book}."
			group = 'verification'
		}
		tcks.forEach { bndFile ->
			def bndName = bndFile.name - '.bnd'
			tcktask.dependsOn tasks.create("${taskName}.${bndName}") {
				description = "Run the ${bndName} TCK for ${book}."
				group = 'verification'
				dependsOn tasks.named("preptck.${book}")
				def injected = objects.newInstance(Injected)
				doLast('exec') { t ->
					injected.exec.javaexec {
						errorOutput = standardOutput // send stderr to stdout
						workingDir destinationDirectory.get().getAsFile()
						main = '-jar' // first arg must be the bnd jar
						args bndjar.get().getAsFile()
						args '--exceptions'
						args 'runtests'
						args '--title', name
						args '--reportdir', "reports/${bndName}"
						args bndFile.name
					}.assertNormalExitValue()
				}
			}
		}
	}
}
