Service Loader Mediator (V 1.0.0) TCK Test Plan:

1. Basic setup:
1.1. Ensure presence of the mediator providing the capabilities:
	osgi.extender: osgi.extender=osgi.serviceloader.processor
	osgi.extender: osgi.extender=osgi.serviceloader.registrar

2. Client side:
2.1. Opt-In:
	2.1.1. install a ServiceLoader client bundle that does not specify the requirement on the extender
		+ ensure that the extender does not treat the client
	- client bundle sets requirement on osgi.extender; file:="(osgi.extender=osgi.serviceloader.processor)"

2.2. Provider visibility (133.3.3):
	2.2.1. all service providers visible
	2.2.2. restrict available service provider by specifying a filter
	2.2.3. restrict visible bundles with service providers via filter
	
2.3. OSGi-aware clients:
	2.3.1. use filter on requirement to restrict visible provider from within a provider bundle

2.4. legacy clients:
	2.4.1. 133.3.3: once client is wired to a provider all service types of that bundle become accessible to the client
	2.4.2. 133.3.5: requirement on osgi.extender, but no filter -> all service type provider are accessible to client
                    Note: This test case is disabled by default because it requires a framework implementation that
                          supports wiring to multiple provider when the directive cardinality:=multiple is specified.
                          See bug https://www.osgi.org/members/bugzilla/show_bug.cgi?id=2424 for further details.
	
2.5. Lifecycle (133.3.4):
	2.5.1. OPTIONAL: once wired, a client bundle is refreshed when the provider bundle is stopped
	2.5.2. client is wired to provider, but provider bundle is stopped -> client cannot see provider in iteration

3. Provider side:
3.1. Opt-In:
	3.1.1. install a bundle with a service provider, but without the Requirement on osgi.serviceloader.registrar
		+ ensure that provider is not registered as a service
	3.1.2. install a service provider bundle and register the service type manually -> clients can use it, mediator does not extend it

3.2. Advertising (133.4.1):
	3.2.1. one provider bundle with multiple implementations of a service type in a single configuration
	3.2.2. no wildcards allowed in provided capability for service type
	3.2.3. provider bundle with no provided capability -> no service type published
	
3.3. Automatic registration of service providers
	- install a bundle with service provider and Requirement on osgi.serviceloader.registrar
	3.3.1. no register directive -> all services are registered
	3.3.2. register directive on capability -> one service factory per capability registered by Mediator
		+ ensure that service has properties from capability, but no private properties
		+ registered service must have property serviceloader.mediator (long) set to the bundle id of the mediator
	3.3.3. Stop provider bundle -> all registered provider services must be unregistered
	3.3.4. Stop mediator bundle -> all registered provider services must be unregistered
		
4. Security Test Cases:
4.1. Provider Side:
	4.1.1. provider bundle needs to have REGISTER permission and package import permission to have the mediator register provider services on its behalf

4.2. Client Side:
	4.2.1. client bundle must have GET service permission and package import permission to be able to use the service provider
	
4.3. Mediator:
	4.3.1. 133.8.1: must have AdminPermission, ServicePermission