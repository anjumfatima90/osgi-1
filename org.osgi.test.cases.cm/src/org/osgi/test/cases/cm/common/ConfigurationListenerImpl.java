/*******************************************************************************
 * Copyright (c) Contributors to the Eclipse Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0 
 *******************************************************************************/

package org.osgi.test.cases.cm.common;

import org.osgi.framework.ServiceReference;
import org.osgi.service.cm.ConfigurationAdmin;
import org.osgi.service.cm.ConfigurationEvent;
import org.osgi.service.cm.ConfigurationListener;
import org.osgi.test.cases.cm.shared.Synchronizer;

/**
 * 
 * Simple <code>ConfigurationListener</code> implementation to be used in the
 * cm test case. This listener just copies the data from the events, so they can
 * be checked later by the test methods.
 * 
 * @author Jorge Mascena
 */
public class ConfigurationListenerImpl implements ConfigurationListener {

	private String[]			factoryPids;
	private String[]			pids;
	private int[]				types;
	private ServiceReference<ConfigurationAdmin>[]	references;
	private Synchronizer		synchronizer;
	private int					eventCount;
	public static final String	LISTENER_PID_SUFFIX	= "RFC0103";

	/**
	 * Creates <code>ConfigurationListenerImpl</code> to be used in the test
	 * case. Keeps data for just one event.
	 * 
	 * @param synchronizer the <code>Synchronizer</code> instance that
	 *        controls concurrency between the listener and the test execution.
	 */
	public ConfigurationListenerImpl(Synchronizer synchronizer) {
		this(synchronizer, 1);
	}

	/**
	 * Creates <code>ConfigurationListenerImpl</code> to be used in the test
	 * case. Keeps data for up to <code>eventCount</code> events.
	 * 
	 * @param synchronizer the synchronizer instance that controls concurrency
	 *        between the listener and the test execution.
	 * @param eventCount number of events expected by this listener.
	 */
	@SuppressWarnings("unchecked")
	public ConfigurationListenerImpl(Synchronizer synchronizer, int eventCount) {
		this.synchronizer = synchronizer;
		this.eventCount = 0;
		factoryPids = new String[eventCount];
		pids = new String[eventCount];
		types = new int[eventCount];
		references = new ServiceReference[eventCount];
	}

	/**
	 * Copies event data to be checked later. Assumes there's an empty slot to
	 * the event data. Filters out not expected events (generated by the
	 * framework).
	 * 
	 * @param event the broadcasted event.
	 * @see org.osgi.service.cm.ConfigurationListener#configurationEvent(org.osgi.service.cm.ConfigurationEvent)
	 */
	@Override
	public void configurationEvent(ConfigurationEvent event) {
		if ((event.getPid() != null && event.getPid().endsWith(
				LISTENER_PID_SUFFIX))
				|| (event.getFactoryPid() != null && event.getFactoryPid()
						.endsWith(LISTENER_PID_SUFFIX))) {
			synchronized (this) {
				factoryPids[eventCount] = event.getFactoryPid();
				pids[eventCount] = event.getPid();
				references[eventCount] = event.getReference();
				types[eventCount] = event.getType();
				eventCount++;
				synchronizer.signal();
			}
		}
	}

	/**
	 * Gets the Service Reference to the Configuration Admin that generated the
	 * first (or single) event.
	 * 
	 * @return the Service Reference from the first (or single) event
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public ServiceReference<ConfigurationAdmin> getReference() {
		return references[0];
	}

	/**
	 * Gets the Service Reference to the Configuration Admin that generated the
	 * <code>i</code> th event.
	 * 
	 * @param i the position of the event (from 1 to the constructor defined
	 *        <code>eventCount</code>)
	 * @return the Service Reference from the <code>i</code> th event
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public ServiceReference<ConfigurationAdmin> getReference(int i) {
		return references[i - 1];
	}

	/**
	 * Gets the factory pid associated with the first (or single) event.
	 * 
	 * @return Returns the factoryPid of the first (or single) event.
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public String getFactoryPid() {
		return factoryPids[0];
	}

	/**
	 * Gets the factory pid associated with the <code>i</code> th event.
	 * 
	 * @param i the position of the event (from 1 to the constructor defined
	 *        <code>eventCount</code>)
	 * @return Returns the factoryPid of the <code>i</code> th event.
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public String getFactoryPid(int i) {
		return factoryPids[i - 1];
	}

	/**
	 * Gets the pid associated with the first (or single) event.
	 * 
	 * @return Returns the pid of the first (or single) event.
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public String getPid() {
		return pids[0];
	}

	/**
	 * Gets the pid associated with the <code>i</code> th event.
	 * 
	 * @param i the position of the event (from 1 to the constructor defined
	 *        <code>eventCount</code>)
	 * @return Returns the pid of the <code>i</code> th event.
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public String getPid(int i) {
		return pids[i - 1];
	}

	/**
	 * Gets the type of the first (or single) event.
	 * 
	 * @return Returns the type of the first (or single) event.
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public int getType() {
		return types[0];
	}

	/**
	 * Gets the type of the <code>i</code> th event.
	 * 
	 * @param i the position of the event (from 1 to the constructor defined
	 *        <code>eventCount</code>)
	 * @return Returns the type of the <code>i</code> th event.
	 * @see org.osgi.service.cm.ConfigurationEvent
	 */
	public int getType(int i) {
		return types[i - 1];
	}
}
