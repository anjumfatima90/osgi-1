<?xml version="1.0" encoding="utf-8"?>
<chapter label="124"
         revision="$Id$"
         version="5.0" xml:id="service.jmx"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Management Model Specification for JMXâ„¢ Technology</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.jmx-version"
    linkend="org.osgi.jmx"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Java Management Extensions (JMX) is the standard API
    specification for providing a management interface to Java SE and Java EE
    applications. The JMX specification defines the design patterns, APIs,
    services and architecture for application management, network management
    and monitoring in the Java programming language. The need to administer,
    monitor and manage a container is today recognized as a prerequisite in
    the enterprise software domain.</para>

    <para>While OSGi defines a rich API for controlling all aspects of the
    framework, this API is not suitable for direct usage in the JMX framework
    because it was not designed to be remoted. This specification provides an
    interface adaptation of the existing OSGi framework, which can be used to
    expose an OSGi Framework manipulation API to any JMX compliant
    implementation. Interfaces and system semantics for a monitoring system
    are specified for exposing the underlying artifacts of the OSGi framework
    such as services and bundles. Additionally, the management of a number of
    core and compendium services have been standardized in this
    document.</para>

    <para>Finally, a standardized JMX object naming standard is proposed so
    that management objects are uniformly named across implementations such
    that any JMX compliant system can find, manipulate and interact with the
    framework and artifacts that it manages.</para>

    <para>This specification requires version 1.2 or later of JMX, which
    implies the use of Java 5.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Life Cycle</emphasis> - Must allow support of full
          life cycle management of bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Batch</emphasis> - Support batch oriented operations
          to minimize the influence of network capacity and latency.</para>
        </listitem>

        <listitem>
          <para><emphasis>Compatible</emphasis> - This specification must work
          naturally with JMX.</para>
        </listitem>

        <listitem>
          <para><emphasis>Efficient</emphasis> - Minimize the number of
          registered objects to not overload the MBean Server and
          communication channels.</para>
        </listitem>

        <listitem>
          <para><emphasis>Open MBean</emphasis> - Support the Open MBean layer
          of JMX instead of using domain specific objects.</para>
        </listitem>

        <listitem>
          <para><emphasis>Core</emphasis> - Supports all the Framework's
          operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Core Services</emphasis> - Support the framework
          services if registered, except for Conditional Permission
          Admin.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>MBean</emphasis> - A Managed Bean. The core concept
          of JMX to manage an entity.</para>
        </listitem>

        <listitem>
          <para><emphasis>MBean Server</emphasis> - The MBean Server is the
          access point for registering MBeans.</para>
        </listitem>

        <listitem>
          <para><emphasis>Manager</emphasis> - The entity that implements the
          MBeans and registers them with the registered MBean servers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Object Name</emphasis> - A name for an MBean
          registered with an MBean Server.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle State MBean</emphasis> - Provides central
          access to the state of a bundle in a framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Framework MBean</emphasis> - Represents the general
          framework's state and can be used to manage the life cycle of
          bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle Wiring State MBean</emphasis> - Provides
          access to the wiring state of the framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service State MBean</emphasis> - Provides access to
          the service information in the service registry. It provides both a
          general MBean interface as well as an Open Type description.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configuration Admin MBean</emphasis> - Can be used
          to manipulate a Configuration Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Permission Admin MBean</emphasis> - Provides access
          to the Permission Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Provisioning Service MBean</emphasis> - Provides
          access to the Provisioning Service.</para>
        </listitem>

        <listitem>
          <para><emphasis>User Admin MBean</emphasis> - Provides access to the
          User Admin service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Item</emphasis> - A helper class to create Open
          Types. This class is intended to make the Javadoc easier to navigate
          and keep definitions close together. This is otherwise hard to do
          with Open Type. This class has no utility for management
          applications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Open Type</emphasis> - A JMX metadata standard to
          describe MBeans.</para>
        </listitem>

        <listitem>
          <para><emphasis>Remote Manager</emphasis> - The entity accessing a
          MBean Server remotely.</para>
        </listitem>

        <listitem>
          <para><emphasis>JConsole</emphasis> - The default Java Remote
          Manager.</para>
        </listitem>
      </itemizedlist>

      <figure pgwide="1">
        <title>MBeans</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.668in"
                       contentwidth="7.000in" fileref="jmx-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>This specification plays a part in both the OSGi framework as well
      as in a remote manager.</para>

      <para>A JMX OSGi manager bundle obtains one or more MBean servers that
      are registered as services. The JMX OSGi manager then registers all its
      managed beans: Framework MBean, Bundle State MBean, Package State MBean,
      and the Service State MBean under their JMX object names. If a number of
      optional services are registered, then the JMX OSGi bundle must also
      register a corresponding MBean with the MBean server for each of the
      services that it can obtain.</para>

      <para>A remote manager can access an MBean Server running in a (remote)
      VM. The remote manager can then discover any MBeans. These MBeans can be
      manipulated as dynamic types or as specific types as outlined in this
      specification.</para>
    </section>
  </section>

  <section>
    <title>JMX Overview</title>

    <para>JMX is a specification which defines how arbitrary remote
    communication protocols and mechanisms can be adapted to interact with the
    underlying management APIs exposed by JMX compliant implementations. JMX
    is not a remote communication standard, the actual protocols can vary. The
    JMX architecture is composed of three levels:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Instrumentation</emphasis> - The managed resources of
        the system are instrumented using <emphasis>managed beans</emphasis>
        (a.k.a. MBeans) which expose their management interfaces through a JMX
        agent for remote management and monitoring.</para>
      </listitem>

      <listitem>
        <para><emphasis>Agent</emphasis> - The JMX agent layer is mainly
        represented by the MBean server. This is the <emphasis>managed
        object</emphasis> server where the MBeans are registered. The JMX
        agent includes a set of functions for manipulating the registered
        MBeans, which directly expose and control the underlying resources,
        and then make them available to remote managers.</para>
      </listitem>

      <listitem>
        <para><emphasis>Remote Manager</emphasis> - The remote management
        layer provides the specification for the actual remote communication
        protocol adapters and defines standard <emphasis>connectors</emphasis>
        which make the JMX agent accessible to remote managers outside of the
        Java process that hosts the agent.</para>
      </listitem>
    </itemizedlist>

    <para>The JMX Architecture is depicted in <xref
    linkend="i3070609"/>.</para>

    <figure xml:id="i3070609">
      <title>JMX Architecture</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="1.500in"
                     contentwidth="5.982in" fileref="jmx-architecture.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Connectors and Adapters</title>

      <para>Connectors are used to connect an agent with a remote JMX-enabled
      managers. This form of communication involves a connector in the JMX
      agent and a connector client in the management application. Protocol
      adapters provide a management view of the JMX agent through a given
      protocol.</para>

      <para>Remote managers that connect to a protocol adapter are usually
      specific to the given protocol. Remote Managers can be generic consoles
      (such as JConsole; see <xref linkend="i3160796"/>), or domain-specific
      monitoring applications. External applications can interact with the
      MBeans through the use of JMX connectors and protocol adapters.</para>
    </section>

    <section>
      <title>Object Name</title>

      <para>All managed objects in JMX are referenced via JMX <emphasis>Object
      Names</emphasis>. Object Names are strings which can be resolved within
      the context of a JMX MBean Server in order. An Object Name consists of
      two parts:</para>

      <programlisting>ObjectName  ::= domain ':' properties
properties  ::= property ( ',' property )*</programlisting>

      <para>To avoid collisions between MBeans supplied by different vendors,
      a recommended convention is to begin the domain name with the reverse
      DNS name of the organization that specifies the MBeans, followed by a
      full stop (<code>'.' \u002E</code>) and a string whose interpretation is
      determined by that organization.</para>

      <para>MBeans specified by the OSGi Working Group have domains that start with
      <code>osgi</code>.</para>
    </section>

    <section>
      <title>MBeans</title>

      <para>Any object can be registered with an MBean Server and manipulated
      remotely over an <emphasis>MBean Server Connection</emphasis>. An MBean
      Server Connection can represent the a local MBean Server or a remote
      MBean Server. An MBean is always identified by an <emphasis>Object
      Name</emphasis>. The Object Name identifies a remote MBean uniquely
      within a specific MBean Server Connection.</para>

      <para>Standard manipulations of a remote MBean are done through
      <emphasis>attributes</emphasis> and <emphasis>operations</emphasis>,
      which are similar to properties and methods for Java beans. Not all
      methods on the implementation class can be used, the registering party
      must specifically provide access to the methods that can be called
      remotely. The registrar can define the exposed operations with the
      following mechanisms:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Design Pattern</emphasis> - Let the registered
          object implement an <emphasis>MBean interface</emphasis> that has
          the fully qualified name of the implementation class suffixed with
          <code>MBean</code>. The MBean server will then limit access to
          attributes and properties defined in the MBean interface. For
          example, the <code>com.acme.Resource</code> class should implement
          the <code>com.acme.ResourceMBean</code> interface. The
          <code>com.acme.ResourceMBean</code> interface would define the
          properties and operations.</para>
        </listitem>

        <listitem>
          <para><emphasis>Dynamic MBean</emphasis> - Register a Dynamic MBean,
          which handles the access to the operations and attributes
          programmatically. The JMX specification provides the
          <code>DynamicMBean</code> interface for this purpose. If the MBean
          registered with an MBean Server implements this interface, then the
          MBean Server must get the MBean's metadata through the
          <code>DynamicMBean</code> interface instead of using reflection.
          Therefore, Dynamic MBeans can provide more rich metadata that
          describes their operations and attributes.</para>
        </listitem>

        <listitem>
          <para><emphasis>Standard MBean</emphasis> - Register a Standard
          MBean. A standard MBean works the same as the previous bullet but
          does not require the implementation class name to map to the MBean
          interface name.</para>
        </listitem>
      </itemizedlist>

      <para>Attributes map to properties on the registered MBean interface and
      operations allow the invocation of an arbitrary method on the remote
      MBean with arbitrary parameters. The following code example shows how to
      get a the size property of a remote MBean in this way:</para>

      <programlisting>void drop( MBeanServerConnection mbs, ObjectNameobjectName) {
  Integer sizeI = (Integer) 
        mbs.getAttribute(objectName, "Size");
  int size = sizeI.intValue();
  if (size &gt; desiredSize) {
    mbs.invoke(objectName,"dropOldest",
        new Integer[] {new Integer(size - desiredSize)},
        new String[] {"int"});
  }
}</programlisting>

      <para>In release 1.2 the JMX specification introduced the
      <emphasis>MBean Server Invocation Handler</emphasis> to simplify the
      manipulation of the remote MBeans by creating a
      <emphasis>proxy</emphasis> for an <emphasis>MBean interface</emphasis>
      that implements all the relevant methods. An MBean interface defines the
      methods and properties for an MBean. The proxy has a reference to an
      <emphasis>MBean Server Connection</emphasis>, it can therefore automate
      the invocation of the appropriate methods from the MBean interface.
      Therefore, by using an MBean interface, it is possible to simplify the
      remote manager:</para>

      <programlisting>MBeanServer mbs = ...;
CacheControlMBean cacheControl = (CacheControlMBean)
 MbeanServerInvocationHandler.newProxyInstance(
    mbs, objectName, CacheControlMBean.class, false);

int size = cacheControl.getSize();
if (size &gt; desiredSize)
  cacheControl.dropOldest(size - desiredSize);</programlisting>

      <para>The creation of the proxy is somewhat verbose, but once it is
      available, the MBean can be accessed like a local object. The proxy is
      much easier to use and read, and much less error-prone, than accessing
      the MBean Server method through invoking operations and getting
      attributes.</para>

      <para>The MBean interface can also ensure a certain amount of type
      safety. The MBean implementation can implement the MBean interface and
      the remote manager uses the proxy implementing this interface. However,
      neither is required. The MBean can directly implement the methods
      without implementing the interface and the remote manager can directly
      manipulate the attributes and invocations.</para>

      <para>The key advantage is therefore the documentation of the management
      interface. Using an MBean interface, this can be done very concisely and
      it allows the usage of standard tools for Java source code and
      Javadoc.</para>
    </section>

    <section xml:id="i3076516">
      <title>Open Types</title>

      <para>The distributed nature of remote management poses a number of
      problems for exchanging general objects.</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Versioning</emphasis> - All participating parties
          require access to the same version of the object's class.</para>
        </listitem>

        <listitem>
          <para><emphasis>Serialization</emphasis> - Not all objects are easy
          to serialize.</para>
        </listitem>

        <listitem>
          <para><emphasis>Size</emphasis> - Arbitrary objects can transitively
          link to large amounts of data.</para>
        </listitem>

        <listitem>
          <para><emphasis>Descriptive</emphasis> - Classes provide little or
          no support for editing.</para>
        </listitem>

        <listitem>
          <para><emphasis>Limited</emphasis> - Classes are Java specific,
          making it harder to interact with non-Java environments.</para>
        </listitem>
      </itemizedlist>

      <para>An alternative is to limit the management types to be exchanged to
      small, well defined set. Open MBeans limit the used data types to small
      number of types called the <emphasis>basic types</emphasis>. These types
      are supported by all JMX 1.2 and later implementations. This basic set
      of types contains:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Primitives</emphasis> - <code>boolean, byte, char,
          short, int, long, float, double</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Primitive Arrays</emphasis> - <code>boolean[],
          byte[], char[], short[], int[], long[], float[],
          double[]</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Wrappers</emphasis> - <code>Boolean, Byte,
          Character, Short, Integer, Long, Float, Double</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Scalars</emphasis> - <code>String, BigDecimal,
          BigInteger, Date, ObjectName</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Complex</emphasis> - <code>CompositeData,
          TabularData</code>, and complex arrays.</para>
        </listitem>

        <listitem>
          <para><emphasis>Return</emphasis> - <code>Void,</code> operation
          return only.</para>
        </listitem>
      </itemizedlist>

      <para>The Complex types are unique to JMX, they are used to provide
      access to complex data (like objects) without using classes. The complex
      types are <emphasis>self describing</emphasis>. The metadata associated
      with these complex types allow a remote manager to discover the
      structure and automatically construct a (graphic) user interface for
      these complex objects.</para>

      <para>Open MBeans must be Dynamic MBeans when registered. Furthermore,
      they must provide Open MBean variations of the Info objects that
      describe the operations and attributes.</para>
    </section>
  </section>

  <section>
    <title>OSGi JMX Management</title>

    <para>The OSGi JMX Management model is based on Open MBeans, see <xref
    linkend="i3076516"/>. This specification declares a number of MBeans for
    the core Framework, some of the core services, and a number of compendium
    services. Though Open MBeans are based on Dynamic MBeans, this
    specification uses the traditional MBean interface to define the
    management interaction patterns. The implementer of this specification
    must register an implementation of these interfaces as a Dynamic MBean. An
    implementation should provide the additional Open MBeans Info objects for
    the operations and attributes.</para>

    <para>This specification defines the following Open MBeans:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Core Framework</emphasis> -
        <code>FrameworkMBean</code>, <code>BundleStateMBean</code>,
        <code>ServiceStateMBean</code>, <code>BundleWiringStateMBean,</code>
        and <code>PackageStateMBean</code>.</para>
      </listitem>

      <listitem>
        <para><emphasis>Core Services</emphasis> -
        <code>PermissionAdminMBean</code>. The Conditional Permission Admin is
        not included in this specification.</para>
      </listitem>

      <listitem>
        <para><emphasis>Compendium Services</emphasis> -
        <code>ConfigurationAdminMBean</code>, <code>UserAdminMBean</code>,
        <code>ProvisioningServiceMBean</code></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Naming</title>

      <para>The MBean interfaces have been named after the service they
      manage. That is the <code>ConfigurationAdminMBean</code> interface
      manages the Configuration Admin service, which is modelled with the
      <code>ConfigurationAdmin</code> interface.</para>

      <para>Package names are constructed from taking the corresponding
      resource package and inserting <code>jmx.</code> after
      <code>org.osgi</code>. For example</para>

      <programlisting>org.osgi.framework          org.osgi.jmx.framework
org.osgi.service.cm         org.osgi.jmx.service.cm</programlisting>

      <para>It is not possible to use the MBean interface design pattern
      because the MBean interfaces are in OSGi packages. The design pattern
      requires the fully qualified name of the implementation suffixed with
      MBean to match the MBean interface name. This would require that the
      implementation class resides in an OSGi package, which would extend
      these packages.</para>

      <para>However, the <code>StandardMBean</code> class allows the
      association of one of the OSGi MBean interfaces with an arbitrary
      class.</para>
    </section>

    <section>
      <title>Object Naming</title>

      <para>Object Names for OSGi managed MBeans must follow the following
      structure:</para>

      <programlisting>object-name    ::= ( core | compendium ) 
                    ',version=' version 
                    ',framework=' framework
                    ',uuid=' uuid
                   (',' key '=' value )*
core           ::= 'osgi.core:' framework-type
compendium     ::= 'osgi.compendium:' service-type
framework-type ::= ( 'type=' token ) | service-type
service-type   ::= 'service=' token
framework      ::= &lt;Bundle symbolic name of the system bundle&gt;
uuid           ::= &lt;org.osgi.framework.uuid Framework property'svalue&gt;
key            ::= &lt;any jmx supported key&gt;
value          ::= &lt;any jmx supported value&gt;</programlisting>

      <para>There are the following additional constraints:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Spaces</emphasis> - Spaces between any of the
          terminals are not permitted.</para>
        </listitem>

        <listitem>
          <para><emphasis>Version</emphasis> - The <code>version</code> must
          be limited to a major and minor version part. The given version must
          identify the package of the corresponding resource. For example, if
          the Configuration Admin service is on version
          <code>1.3.2.200910101250</code>, then the version in the Object Name
          must be <code>1.3</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Service</emphasis> - The <code>service-type</code>
          should use the package name of the corresponding service. For
          example, for Configuration Admin this would be
          <code>service=cm</code>.</para>
        </listitem>
      </itemizedlist>

      <para>The Object Name must contain the framework bundle symbolic name
      and its UUID so that multiple instances on the same VM can be
      discriminated. An example of an Object Name is:</para>

      <programlisting>osgi.core:type=framework,version=1.7,framework=org.apache.felix.framework, Â«
    uuid=f81d4fae-7dec-11d0-a765-00a0c91e6bf6</programlisting>

      <para>The advantage of the framework property is that it can be used to
      simplify the querying for the MBeans using Object Name
      <emphasis>patterns</emphasis>. Patterns are names have an asterisk
      (<code>'*' \u002A</code>). For instance, the following query allows a
      client to find all Framework MBeans for an Apache Felix implementation
      without having to rely on knowing the UUID:</para>

      <programlisting>ObjectName on = new ObjectName(
    "osgi.core:type=framework,"
    +   "version=1.7,framework=org.apache.felix.framework,*");
Set&lt;ObjectInstance&gt; instances = mserver.queryMBeans(on,null);</programlisting>

      <para>Furthermore, in many cases, a JMX client may appropriately assume
      that only a single instance of the OSGi framework exists in the managed
      system, as in the following example:</para>

      <programlisting>ObjectName on = new ObjectName("osgi.core:type=framework,version=1.7,*");
Set&lt;ObjectInstance&gt; instances = mserver.queryMBeans(on,null);</programlisting>

      <para>The <code>uuid</code> and <code>framework</code> property keys are
      only applicable to OSGi JMX Management Model Specification Version 1.1
      and above.</para>

      <para>To maintain backward compatibility, a OSGi JMX Framework package
      Version 1.7 may register the first instantiation of an OSGi framework
      using both the Version 1.0 Object Names as well as the Object Names
      outlined in this specification. In other words, a JMX client may not
      specify the <code>uuid</code> and/or framework properties, and still
      retrieve the MBeans for a OSGi framework instance.</para>

      <para>The actual object name prefixes are defined in the MBean
      interfaces. For example, the Object Name for the Configuration Admin
      MBean is:</para>

      <programlisting>osgi.compendium:service=cm,version=1.3</programlisting>

      <para>It is the responsibility of the party registering the MBean to
      suffix this with the framework and UUID.</para>

      <para>In this specification, all management interfaces are specified to
      return opaque Strings or longs rather than Object Names so that the
      MBean interfaces contain no JMX specific artifacts and can be used with
      a variety of remote access protocols such as SNMP, etc. Non JMX use of
      these APIs can use these Strings as their own opaque identifiers without
      any change to the interfaces themselves.</para>
    </section>

    <section>
      <title>The MBean Server</title>

      <para>An implementation of this specification must find all MBean
      Servers services that it has access to. It should then register all
      MBeans with each server found in the service registry.</para>

      <para>A compliant implementation must register all the framework's
      MBeans: <code>FrameworkMBean, BundleStateMBean, ServiceStateMBean,
      BundleWiringStateMBean and PackageStateMBean</code>. The registration of
      the compendium services is optional. However, if they are registered
      they must implement the behavior as defined in this
      specification.</para>
    </section>

    <section>
      <title>Registrations</title>

      <para>The OSGi MBeans are designed to minimize the notifications. That
      is, the objects model a command interface to access the required
      information. Their registration is not intended to signify anything else
      than the start of the manager bundle and the availability of the
      underlying resource.</para>

      <para>Implementations must always register only one of each of the
      Framework MBean types (Framework MBean, Service State MBean, Bundle
      State MBean, Wiring State MBean, and Package State MBean). All other
      MBean types depend on the registered services they manage. Each service
      requires its unique MBean. If no corresponding service is present, then
      no MBean should be registered. Modified events must be ignored. If a
      manager supports a specific OSGi MBean for a compendium service then it
      must register an MBean for each instance of that service.</para>
    </section>
  </section>

  <section>
    <title>MBeans</title>

    <para>This specification defines MBean interfaces listed in the following
    table. The Object Name specified in this table is broken into a number of
    lines for readability, however, newlines and whitespace is not allowed in
    the Object Name.</para>

    <table>
      <title>MBeans</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1.2*"/>

        <thead>
          <row>
            <entry>MBean</entry>

            <entry>Object Name</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><para><xref linkend="org.osgi.jmx.framework.FrameworkMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=framework,</code></para><para><code>version=1.7</code></para></entry>

            <entry><para>Provides access to bundle life cycle methods of the
            framework including batch install and update
            operations.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.framework.BundleStateMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=bundleState,</code></para><para><code>version=1.7</code></para></entry>

            <entry><para>Provides detailed access to the state of one bundle
            and aggregated state of a group of bundles.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.framework.ServiceStateMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=serviceState,</code></para><para><code>version=1.7</code></para></entry>

            <entry><para>Provides detailed access to the state of one service
            and aggregated state of a group of services.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.framework.PackageStateMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>type=packageState,</code></para><para><code>version=1.5</code></para></entry>

            <entry><para>Provides detailed access to the state of one package
            and aggregated state of a group of packages.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.service.permissionadmin.PermissionAdminMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>service=permissionadmin,</code></para><para><code>version=1.2</code></para></entry>

            <entry><para>Based on the Permission Admin service.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.service.cm.ConfigurationAdminMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.compendium:</code></para><para><code>service=cm,</code></para><para><code>version=1.3</code></para></entry>

            <entry><para>Manages a Configuration Admin service.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.service.provisioning.ProvisioningServiceMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.compendium:</code></para><para><code>service=provisioning,</code></para><para><code>version=1.2</code></para></entry>

            <entry><para>Manages a Provisioning Service.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.service.useradmin.UserAdminMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.compendium:</code></para><para><code>service=useradmin,</code></para><para><code>version=1.1</code></para></entry>

            <entry><para>Manages a User Admin service.</para></entry>
          </row>

          <row>
            <entry><para><xref
            linkend="org.osgi.jmx.framework.wiring.BundleWiringStateMBean"
            xrefstyle="hyperlink"/></para></entry>

            <entry><para><code>osgi.core:</code></para><para><code>service=wiringState,</code></para><para><code>version=1.1</code></para></entry>

            <entry><para>Reflects the Framework's wiring state.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Item</title>

    <para>The MBean interfaces do not only define the Java interface, they
    also define the Open Types. These types are defined with the <xref
    linkend="org.osgi.jmx.Item" xrefstyle="hyperlink"/> class in this
    specification to simplify the definitions; the Item class has no role in a
    management application. The Item class is used to allow the items used in
    Composite Types to be encoded in the interface. This is not possible with
    the standard Open Types because they use exceptions and use parallel
    arrays. For example, the following code defines a static Open Type without
    the Item class:</para>

    <programlisting>static CompositeType HEADER;
static {
   try {
     HEADER = new CompositeType( "HEADER" "This is a header", 
        new String[] {"KEY", "VALUE"},
        new String[] {"A key for a header", "A value for a header"},
        new OpenType[] { SimpleType.STRING, SimpleType.STRING });
   catch(OpenDataException e) {
     ...
   }
}</programlisting>

    <para>This code can be replaced with the <code>Item</code> class:</para>

    <programlisting>static Item KEY = new Item("KEY", "A key forheader", SimpleType.STRING );
static Item VALUE = new Item("VALUE", "A value for header",SimpleType.STRING );
static CompositeType HEADER = Item.composite( "HEADER", "Thisis a header",
    KEY, VALUE );</programlisting>

    <para>The Item class also provides a number of convenience methods to
    construct the different Open Types. However, the intention is to simplify
    the specification definitions, not as an aid in management
    operations.</para>
  </section>

  <section>
    <title>Security</title>

    <para>Exposing any system remotely opens up a, potentially, devastating
    security hole in a system. Remote entities should establish their identity
    and the management system should be able to control the access these
    entities have over the management system. JMX seamlessly inter operates
    with the Java Authentication and Authorization Service (JAAS) and Java 2
    platform Standard Edition (Java SE) Security Architecture.</para>

    <para>The JMX OSGi manager must have access to the services it manages and
    the operations it invokes. It is likely that this bundle requires All
    Permission because it needs to invoke operations on the Conditional
    Permission Admin. It is strongly advised that implementations limit the
    set of available permissions based on authenticating the remote
    manager.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.framework.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.service.cm.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.service.permissionadmin.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.service.provisioning.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.service.useradmin.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.jmx.framework.wiring.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed><title>JMX</title><biblioid class="uri"><link
      xlink:href="http://en.wikipedia.org/wiki/JMX"/></biblioid></bibliomixed>

      <bibliomixed><title>Java Management Extensions (JMX) Technology
      Overview</title><biblioid class="uri"><link
      xlink:href="http://docs.oracle.com/javase/1.5.0/docs/guide/jmx/overview/JMXoverviewTOC.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3067363"><title>JSR 3: Java Management Extensions
      (JMX) Specification</title><biblioid class="uri"><link
      xlink:href="http://www.jcp.org/en/jsr/detailid=3"/></biblioid></bibliomixed>

      <bibliomixed><title>JSR 255: Java Management Extensions (JMX)
      Specification, version 2.0</title><biblioid class="uri"><link
      xlink:href="http://www.jcp.org/en/jsr/detailid=255"/></biblioid></bibliomixed>

      <bibliomixed><title>JSR 160: JavaTM Management Extensions (JMX) Remote
      API</title><biblioid class="uri"><link
      xlink:href="http://www.jcp.org/en/jsr/detailid=160"/></biblioid></bibliomixed>

      <bibliomixed><title>JSR 262: Web Services Connector for Java Management
      Extensions (JMX) Agents</title><biblioid class="uri"><link
      xlink:href="http://www.jcp.org/en/jsr/detailid=262"/></biblioid></bibliomixed>

      <bibliomixed><title>JavaTM Management Extensions (JMXTM)API
      Specification</title><biblioid class="uri"><link
      xlink:href="http://docs.oracle.com/javase/1.5.0/docs/guide/jmx/spec.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3160796"><title>Using JConsole to Monitor
      Applications</title><biblioid class="uri"><link
      xlink:href="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>
