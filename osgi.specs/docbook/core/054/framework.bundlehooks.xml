<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="54" revision="$Id$"
         version="5.0" xml:id="framework.bundlehooks"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Bundle Hook Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.hooks.bundle-version"
    linkend="org.osgi.framework.hooks.bundle"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The basic framework provides complete visibility for any bundle to
    any other bundle. In certain use cases it can be important to provide the
    impression to application bundles that they are part of a limited group of
    bundles. Bundle Hook services allow Handlers to hide bundles from other
    bundles by filtering the Bundle Events and return values of methods that
    return bundles.</para>

    <para>Though Bundle Hooks can effectively control bundle visibility of
    other bundles by filtering some of the key Bundle Context methods as well
    as event delivery, it does not provide proper isolation. Bundles that use
    other API will be able to see bundles even if they are hidden by the
    Bundle Hooks.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Filtering</emphasis> - Remove bundles from the view
          of specific bundles.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Find Hook</emphasis> - A service used by the
          framework to filter methods that return bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Event Hook</emphasis> - A service used by the
          framework to filter Bundle Events before they are delivered to their
          listeners.</para>
        </listitem>

        <listitem>
          <para><emphasis>Collision Hook</emphasis> - A service used by the
          framework to filter colliding bundles during an install or update
          operation when the <code>org.osgi.framework.bsnversion</code> is set
          to <code>managed</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Collision</emphasis> - Two bundles collide when they
          have the same version and bundle symbolic name.</para>
        </listitem>

        <listitem>
          <para><emphasis>Client</emphasis> - The bundle that finds bundles or
          receives events about bundles.</para>
        </listitem>

        <listitem>
          <para><emphasis>Handler</emphasis> - The bundle that registers a
          hook service.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target</emphasis> - The bundle performing the
          install or update operation.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Bundle Hooks, org.osgi.framework.hooks.bundle package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.546in"
                       contentwidth="7.000in"
                       fileref="bundlehooks-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>A Handler registers Bundle Hook services to filter the view on the
      bundles stored in the framework. Whenever the framework has to deliver
      Bundle events to one or more bundles the Event Hook services are asked
      to look at the target bundles and remove any targets from the
      collection. Removed bundles are then not notified.</para>

      <para>If a bundle calls a method that returns a bundle like the Bundle
      Context <code>getBundles</code> method or the <code>getBundle</code>
      method, the Find Hook is called. The Find Hook can then look at the
      bundles that will be returned to the caller and filter that list
      accordingly.</para>

      <para>If the Framework installs or updates a bundle it is possible that
      the new bundle symbolic name/version pair collides with an existing
      bundle. The <code>org.osgi.framework.bsnversion</code> property controls
      the property in this case. The Collision Hook is used to control this
      policy when the property is set to <code>managed</code>.</para>

      <para>There can be multiple Bundle Hook services registered by different
      Handlers, multiple Bundle Hook services are called in service ranking
      order.</para>
    </section>
  </section>

  <section>
    <title>About the Hooks</title>

    <para>The Bundle hooks provide a basic mechanism to hide bundles from each
    other as well as control <emphasis>bundle collisions</emphasis>. The
    Bundle <emphasis>Event Hook</emphasis> allows a
    <emphasis>Handler</emphasis> to hide Bundle Events from bundles, the
    Bundle <emphasis>Find Hook</emphasis> allows a Handler to alter the result
    of framework methods that return bundles. The Collision Hook is used for
    providing a policy when bundles collide. A collision takes place when
    there is an attempt to install or update a bundle and the situation arises
    that there are two bundles with the same bundle symbolic name and
    version.</para>

    <para>A Find Hook or an Event Hook can influence the outcome of a number
    of operations that retrieve a bundle or show a bundle related event by
    removing entries from <emphasis>shrinkable</emphasis> collections. A
    shrinkable collection is a collection that can only remove entries, not
    add to it. Any attempt to add to the collection must result in throwing an
    Unsupported Operation Exception. All collections in the Find Hook and
    Event Hook API are shrinkable collections.</para>

    <para>The framework must call the hooks in a privileged block, see <xref
    linkend="framework.lifecycle.privilegedcallbacks"/>. Hooks are always
    called in service ranking order, <xref
    linkend="framework.service.servicerankingorder"/>.</para>
  </section>

  <section>
    <title>Bundle Event Hook</title>

    <para>Handlers must ensure that Client bundles continue to see a
    consistent set of Bundle Events that strictly follow the transitions
    defined by the OSGi specifications because Bundle events can be used in a
    state machine that depends on these transitions. Such state machines can
    get confused if some Bundle Events are missed.</para>

    <para>For example, if a Bundle Tracker sees a <code>STARTED</code> event
    but the corresponding <code>STOPPED</code> event is removed for that
    Client then the tracker will still assume the associated bundle is
    active.</para>

    <para>A simple solution is to stop the Client bundle when the Handler
    decides to start filtering the Bundle Events. The Client bundle should
    then be started after the filter is in place. This model ensures that the
    Handler can assume the Client has no knowledge of any hidden
    bundles.</para>

    <para>However, when the bundle that implements the bundle event hook is
    stopped, it will of course no longer be able to filter events and the
    target bundle might see bundle events for bundles it was not aware
    of.</para>

    <para>As a best practice a Handler should not hide a Bundle from itself.
    That is, its own events should always be received and if it gets the
    bundles from the framework its own <code>Bundle</code> object should be
    included.</para>

    <para>A Handler must register a bundle Event Hook service to intercept and
    filter events before they are delivered to bundles. The framework must
    call the <xref
    linkend="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-"
    xrefstyle="hyperlink"/> method on all registered hooks in service ranking
    order to filter the events before they are delivered to any of the
    registered bundle listeners. The Handler can remove any
    <code>BundleContext</code> objects from the given shrinkable collection it
    wants shield from the event's Bundle.</para>

    <para>The <code>event</code> method must be called once for each Bundle
    Event, this includes Bundle Events that are generated when there are no
    Bundle Listeners registered.</para>

    <para>The <xref
    linkend="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-"
    xrefstyle="hyperlink"/> method must be called on the same thread that is
    performing the action which generated the specified event. The shrinkable
    collection includes <code>BundleContext</code> objects with all Bundle
    Listeners registered with them.</para>

    <para>A Bundle Event Hook must receive all Bundle Events:</para>

    <itemizedlist>
      <listitem>
        <para><code>INSTALLED</code></para>
      </listitem>

      <listitem>
        <para><code>RESOLVED</code></para>
      </listitem>

      <listitem>
        <para><code>STARTING</code></para>
      </listitem>

      <listitem>
        <para><code>STARTED</code></para>
      </listitem>

      <listitem>
        <para><code>STOPPING</code></para>
      </listitem>

      <listitem>
        <para><code>STOPPED</code></para>
      </listitem>

      <listitem>
        <para><code>UNRESOLVED</code></para>
      </listitem>

      <listitem>
        <para><code>UPDATED</code></para>
      </listitem>

      <listitem>
        <para><code>UNINSTALLED</code></para>
      </listitem>

      <listitem>
        <para>Other if new events are defined in later versions</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>System Bundle Listeners</title>

      <para>Bundle Listeners may be registered with the system bundle's
      <code>BundleContext</code>. If at least one Bundle Listener is
      registered with the system bundle's <code>BundleContext</code> then the
      system bundle's <code>BundleContext</code> must be contained in the
      shrinkable collection passed to the <xref
      linkend="org.osgi.framework.hooks.bundle.EventHook.event-BundleEvent-Collection-"
      xrefstyle="hyperlink"/> bundle event hook method. Just like other
      <code>BundleContext</code> objects contained in the shrinkable
      collection, the system bundle's <code>BundleContext</code> may be
      removed. If the system bundle's <code>BundleContext</code> is removed by
      a bundle Event Hook then the <code>BundleContext</code> will not be
      contained in the collection for the remaining bundle Event Hooks called.
      Unlike other <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is removed from the shrinkable collection
      then the bundle event is still delivered to the Bundle Listeners added
      to the system bundle's <code>BundleContext</code>.</para>
    </section>
  </section>

  <section>
    <title>Bundle Find Hook</title>

    <para>The purpose of the Bundle Find Hook, is to limit the visibility of
    bundles to selected Client bundles. The Find Hook service is called with
    the <xref
    linkend="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-"
    xrefstyle="hyperlink"/> method on all Handler Hook services in service
    ranking order when a Client bundle tries to get bundles from the
    framework. A registered Find Hook service gets a chance to inspect the
    candidate set of bundles and can remove any bundle that must be hidden
    from the receiver.</para>

    <para>The Bundle Find Hook can filter the result of the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext.getBundle-long-"
        xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref linkend="org.osgi.framework.BundleContext.getBundles--"
        xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>

    <para>The Find Hook is not called for:</para>

    <itemizedlist>
      <listitem>
        <para><xref
        linkend="org.osgi.framework.BundleContext.getBundle-String-"
        xrefstyle="hyperlink"/> - If the caller knows the name then it is not
        necessary to hide the bundle.</para>
      </listitem>
    </itemizedlist>

    <para>The Bundle Find Hook is also used during an install operation when
    the to be installed bundle is already installed at a given location.
    Normally, the install the returns the Bundle object of the existing bundle
    but this can cause confusion for the installer when this bundle is hidden
    by the Find Hook. Therefore, the <xref
    linkend="org.osgi.framework.BundleException.REJECTED_BY_HOOK"
    xrefstyle="hyperlink"/> Bundle Exception is thrown when the <xref
    linkend="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-"
    xrefstyle="hyperlink"/> method determines that the Bundle Context has no
    visibility of the conflicting bundle.</para>

    <section>
      <title>System Bundle Context</title>

      <para>When the <xref
      linkend="org.osgi.framework.BundleContext.getBundle-long-"
      xrefstyle="hyperlink"/> or <xref
      linkend="org.osgi.framework.BundleContext.getBundles--"
      xrefstyle="hyperlink"/> methods are called using the system bundle's
      <code>BundleContext</code> then the bundle Find Hooks are called in the
      same way the hooks are called when a normal <code>BundleContext</code>
      is used. The system bundle's <code>BundleContext</code> along with the
      shrinkable candidate bundles collection is passed to the <xref
      linkend="org.osgi.framework.hooks.bundle.FindHook.find-BundleContext-Collection-"
      xrefstyle="hyperlink"/> method. Bundle Find Hooks may remove bundles
      from the shrinkable collection. If a bundle is removed by a bundle Find
      Hook then the bundle will not be contained in the collection for the
      remaining bundle Find Hooks called. Unlike other
      <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is used to find bundles then the Framework
      ignores the bundle removals performed by the bundle Find Hooks and
      allows the bundles removed to remain visible in the find results.</para>

      <para>The bundle Find Hook is also used during an install operation.
      When the system bundle's <code>BundleContext</code> is used to install a
      bundle then the bundle Find Hooks are called in the same way the hooks
      are called when a normal <code>BundleContext</code> is used. Unlike
      other <code>BundleContext</code> objects, if the system bundle's
      <code>BundleContext</code> is used to install bundles then the Framework
      ignores the bundle removals performed by the bundle Find Hooks. This
      implies that if the system bundle's <code>BundleContext</code> is used
      to install a bundle at a location where an existing bundle is installed
      then the existing bundle is always returned.</para>
    </section>
  </section>

  <section xml:id="framework.bundlehooks.collisionhook">
    <title>Bundle Collision Hook</title>

    <para>Two bundles <emphasis>collide</emphasis> when they have the same
    bundle symbolic name and version, although there location must always be
    different. The <code>org.osgi.framework.bsnversion</code> launching
    property (see <xref linkend="framework.lifecycle.launchingproperties"/> )
    defines the policy when a collision is about to take place during install
    or update operations. The launching property can have the following
    values:</para>

    <itemizedlist>
      <listitem>
        <para><code>single</code> - Collisions are not allowed, attempting to
        install/update a bundle that will cause a collision is rejected and
        all bundles can assume there are no collisions between installed
        bundles.</para>
      </listitem>

      <listitem>
        <para><code>multiple</code> - Collisions are allowed and bundles must
        assume that there are collisions in the set of installed
        bundles.</para>
      </listitem>

      <listitem>
        <para><code>managed</code> - Collisions are
        <emphasis>managed</emphasis> via a Collision Hook service, specified
        in the remainder of this section.</para>
      </listitem>
    </itemizedlist>

    <para>There are two <emphasis>types</emphasis> of operation that can
    <emphasis>create</emphasis> a new <emphasis>bundle revision</emphasis>:
    Install and Update. During this creation the framework has to consider its
    <code>bsnversion</code> policy as defined by the launching property. For
    each creation, there are a number of <emphasis>candidates</emphasis> to
    collide with. In <code>single</code> mode, any candidate that exists will
    fail the creation. In <code>multiple</code> mode, any number of candidates
    are allowed. In <code>managed</code> mode, no candidates are allowed, like
    the single mode, but the Collision Hook services can prune the list of
    candidates before the framework makes the decision. If the Collision Hook
    services have emptied the list of candidates then the installation will
    succeed, if any bundle remains in this list then the operation fails. In
    <code>managed</code> mode, creations are treated as in <code>single</code>
    mode but bundles must assume as if the system operates in
    <code>multiple</code> mode.</para>

    <para>The purpose of the Collision Hook is to delegate the decision of
    bundle collisions to a management agent. For example, using this and other
    hooks a management agent can create regions of bundles that have limited
    visibility of each other. Since these bundles do not have visibility of
    all other bundles a global collision does not necessarily translate into a
    collision inside a region. Using the Collision Hook the management agent
    can allow these collisions globally but restrict their impact
    locally.</para>

    <para>In <code>managed</code> mode the framework must call all registered
    Collision Hook services for each bundle install and update operation. The
    calling order of the hooks is defined by ranking order, see <xref
    linkend="framework.service.servicerankingorder"/>. The Collision Hook
    service is only called in <code>managed</code> mode and there exists one
    or more candidates during the creation phase of an install/update
    operation.</para>

    <para>The <xref linkend="org.osgi.framework.hooks.bundle.CollisionHook"
    xrefstyle="hyperlink"/> interface has a single method:</para>

    <itemizedlist>
      <listitem>
        <para><xref
        linkend="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-"
        xrefstyle="hyperlink"/> - An install or update operation is in
        progress that will result in a possible bundle collision. The
        implementer of this method can optionally shrink the given collection
        of any collision candidates if it can decide that a collision cannot
        harm.</para>
      </listitem>
    </itemizedlist>

    <para>The <xref
    linkend="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-"
    xrefstyle="hyperlink"/> method takes a type of operation value that must
    be one of the following two values that indicate the operation that caused
    the Collision Hook to be called:</para>

    <itemizedlist>
      <listitem>
        <para><xref
        linkend="org.osgi.framework.hooks.bundle.CollisionHook.INSTALLING"
        xrefstyle="hyperlink"/></para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.framework.hooks.bundle.CollisionHook.UPDATING"
        xrefstyle="hyperlink"/></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>System Bundle Context</title>

      <para>When the system bundle's <code>BundleContext</code> is used to
      install a bundle then the Collision Hooks are called in the same way the
      hooks are called when a normal <code>BundleContext</code> is used. The
      system bundle along with the shrinkable candidate bundles collection is
      passed to the <xref
      linkend="org.osgi.framework.hooks.bundle.CollisionHook.filterCollisions-int-Bundle-Collection-"
      xrefstyle="hyperlink"/> method. Bundle Collision Hooks may remove
      bundles from the shrinkable collection. If a bundle is removed by a
      bundle Collision Hook then the bundle will not be contained in the
      collection for the remaining bundle Collision Hooks called. Unlike the
      other bundle and service hooks, if the system bundle's
      <code>BundleContext</code> is used to install a bundle then the
      Framework must not ignore the bundle removals performed by the bundle
      Collision Hooks. This implies that the system bundle's
      <code>BundleContext</code> can be used to install the same bundle
      multiple times when the <code>org.osgi.framework.bsnversion</code>
      launching property is set to <code>managed</code>.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>All hooks described in this specification are highly complex
    facilities that require great care in their implementation to maintain the
    Framework invariants. It is therefore important that in a secure system
    the permission to register these hooks is only given to privileged
    bundles.</para>

    <para>In this case, the user of the hook services is the framework.
    Therefore, there is never a need to provide:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..EventHook,GET]</code>, or</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..FindHook,GET]</code>, or</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..CollisionHook,GET]</code></para>
      </listitem>
    </itemizedlist>

    <para>Implementers of these hooks must have:</para>

    <itemizedlist>
      <listitem>
        <para><code>ServicePermission[..EventHook,REGISTER]</code> for Event
        Hook services.</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..FindHook,REGISTER]</code> for Find
        Hook services</para>
      </listitem>

      <listitem>
        <para><code>ServicePermission[..CollisionHook,REGISTER]</code> for
        Collision Hook services</para>
      </listitem>
    </itemizedlist>
  </section>

  <xi:include href="../../../generated/javadoc/docbook/org.osgi.framework.hooks.bundle.xml"/>
</chapter>
