<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="60" revision="$Id$"
         version="5.0" xml:id="framework.connect"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Connect Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.framework.connect-version"
    linkend="org.osgi.framework.connect"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The Service Layer provides a dynamic, concise and consistent
    programming model for Java developers, simplifying the development
    and deployment of services by de-coupling the service's specification
    (Java interface) from its implementations. This model allows developers
    to bind to services only using their interface specifications.
    The selection of a specific implementation, optimized for a specific need
    or from a specific vendor, can thus be deferred to runtime.</para>

    <para>In order to use this powerful tool, developers are required to build
    on top of the Life Cycle and Module Layer of the OSGi Framework. Anything
    built on top of the Service Layer must follow the rules of the 
    Life Cycle and Module Layers as well as the Service Layer. The Module
    Layer has rules for sharing Java packages between bundles or
    hiding packages from other bundles.  The Life Cycle Layer provides an API
    to manage bundles in the Module Layer.</para>

    <para>The Module and Life Cycle Layers assume the Framework is in control
    of the actual deployment unit (bundle) which is deployed as a Java archive (JAR) file.
    The Module Layer then provides the access for reading content and meta-data from the bundle and loading 
    classes from the bundle. This can make it difficult to use classes or services that are already present in the running
    environment, for example, from the class path or anything else whose class space is managed outside of
    the framework.  Without the Connect specification, content that lives outside the control of the
    Framework cannot easily benefit from the rich Service Layer because there is no way to represent the outside
    content as bundles inside the Framework.</para>

    <para>This specification defines a Connect Framework Factory to create and launch an OSGi
    Framework instance that can connect bundles in the Framework with content managed outside of the Framework
    itself. For example, to provide things like resource loading, class loading, bundle entry content
    and bundle manifest headers. Among other things, this allows for bundles to exist and be installed
    into the Framework from the flat class path, the module path (Java Platform Module System), a jlink
    image, or a native image. Such bundles may have some limitations with respect to class loading
    and isolation because they may not follow the rules of the OSGi Module Layer.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>OSGi Service Registry</emphasis> - It must be possible to use the
          OSGi Service Registry in environments that do not have the full OSGi Module Layer.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Dependency Model</emphasis> - It must be possible to use
          the requirements and capabilities model OSGi provides in environments that
          do not have the full OSGi Module Layer. </para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Extender Pattern</emphasis> - It must be possible to support
          the OSGi Extender Pattern in environments that do not have the full OSGi Module
          Layer. For example, Declarative Services.</para>
        </listitem>

        <listitem>
          <para><emphasis>OSGi Technologies</emphasis> - It must be possible to support
          other OSGi technologies and specifications such as Configuration Admin,
          Metatype Service, Log Service etc. in environments that do not have the full
          OSGi Module Layer.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Connect Content</emphasis> - Provides a Framework access to content from outside the Framework
          that can be used to represent an installed bundle in the Framework.  A connect content provides things like a 
          class loader for the bundle, access to entries in a bundle, and the bundle manifest headers.</para>
        </listitem>

        <listitem>
          <para><emphasis>Connect Module</emphasis> - Provides the current connect content available for a bundle installed
          in the Framework.  If the connect content for a bundle is constant then the connect module may return the
          same connect content for the lifetime of the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis>Module Connector</emphasis> - Hooks into the initialization of the Framework and connects
          bundles installed in the Framework with connect module instances.</para>
        </listitem>

        <listitem>
          <para><emphasis>Connect Framework Factory</emphasis> - A factory, similar to the FrameworkFactory, that is used
          to create Framework instances that use a module connector.</para>
        </listitem>

        <listitem>
          <para><emphasis>Connect Bundle</emphasis> - A bundle installed in the Framework that is connected to a 
          connect module and has its content provided by a connect content.</para>
        </listitem>
      </itemizedlist>
      <figure pgwide="1">
        <title>Connect Class Diagram</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="7.000in"
                       contentwidth="6.125in"
                       fileref="connect-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>A launcher is in control of discovering and loading the connect framework factory implementation and the module connector implementation.
      The launcher is then able to use the connect framework factory to create a Framework instance that uses the module connector instance.
      When a connect bundle is installed it will be connected to a single connect module. Each bundle revision for the connect bundle is furthermore
      connected with a single connect content.</para>
    </section>
  </section>

  <section>
    <title>Module Connector</title>
    <para>This section outlines how a <emphasis>launcher</emphasis> can launch
    a Framework implementation with an implementation of a <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/>, regardless of the
    implementation type of the framework. This allows a launcher to embed an
    OSGi framework without having to provide code that differs between
    different implementations. 
    </para>
<section>
      <title>Launching a Framework</title>

      <para>A Framework implementation that supports the Connect specification must provide a
      <emphasis>factory</emphasis> class. A factory class is an indirection to
      create a framework implementation object. The implementation factory
      class must implement the <xref
      linkend="org.osgi.framework.connect.ConnectFrameworkFactory"
      xrefstyle="hyperlink"/> interface. The launcher can use the following
      ways to get this class name:</para>

      <itemizedlist>
        <listitem>
          <para>Service Provider Configuration model, see <xref
          linkend="framework.connect.service.provider"/>,</para>
        </listitem>

        <listitem>
          <para>Get it from some configuration and use
          <code>Class.forName</code>, or</para>
        </listitem>

        <listitem>
          <para>Hardcode the name.</para>
        </listitem>
      </itemizedlist>

      <para>The <xref linkend="org.osgi.framework.connect.ConnectFrameworkFactory"
      xrefstyle="hyperlink"/> interface has a single method: <xref
      linkend="org.osgi.framework.connect.ConnectFrameworkFactory.newFramework-Map-ModuleConnector-"
      xrefstyle="hyperlink"/>. The map provides the sole configuration
      properties for the framework object. The <xref linkend="org.osgi.framework.connect.ModuleConnector"
      xrefstyle="hyperlink"/> implementation provides the OSGi Framework with the support
      to connect bundles with <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> instances.
      The result of this method is a
      <emphasis>framework object</emphasis>, this object implements the <xref
      linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/>
      interface. See <xref linkend="framework.lifecycle-frameworks"/> for details
      on the <xref
      linkend="org.osgi.framework.launch.Framework" xrefstyle="hyperlink"/> interface.</para>

      <para>The following code shows how a Framework can be launched with a module connector.</para>

      <programlisting>Framework launch(ModuleConnector moduleConnector) 
            throws Exception {
    Map&lt;String, String&gt; p = new HashMap();
    p.put( "org.osgi.framework.storage",    
            System.getProperty("user.home")
        +   File.separator+"osgi");

    ServiceLoader&lt;ConnectFrameworkFactory&gt; sl =
        ServiceLoader.load(ConnectFrameworkFactory.class);

    ConnectFrameworkFactory factory = sl.iterator().next();
    Framework osgiFramework = factory.newFramework(p, moduleConnector);
    osgiFramework.init();
    osgiFramework.start();
    return osgiFramework;
}</programlisting>
    </section>
    <section xml:id="framework.connect.initializing">
      <title>Initializing the Module Connector</title>
      <para>Before a module connector can be used by a <code>Framework</code> instance, the
      <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> must
      be <emphasis>initialized</emphasis>.
      Initialization is caused by the <code>Framework</code> calling the 
      <xref linkend="org.osgi.framework.connect.ModuleConnector.initialize-File-Map-" xrefstyle="hyperlink"/>
      method on the module connector.  The module connector <code>initialize</code> method must only be called
      once for the lifetime of the <code>Framework</code> instance.  If the <code>Framework</code> is stopped
      as defined by <xref linkend="framework.lifecycle.stopping"/> and initialized again as defined by
      <xref linkend="framework.lifecycle.initializing"/> the module connector <code>initialize</code> method must
      not be called again.</para>

      <para>If the framework supports persistence then the framework determines the path used for the storage
      area according to the launch property <xref linkend="org.osgi.framework.Constants.FRAMEWORK_STORAGE" xrefstyle="hyperlink"/>.
      Once the framework instance has determined the storage area the <code>ModuleConnector</code> method
      <xref linkend="org.osgi.framework.connect.ModuleConnector.initialize-File-Map-" xrefstyle="hyperlink"/> must be called.
      The file is the storage area used by the Framework and may be <code>null</code>
      if persistence is not supported. This file may be used by the module connector for persistent storage.
      The map is the unmodifiable map of the Framework configuration properties
      that were used to create the new Framework instance with the method <xref
      linkend="org.osgi.framework.connect.ConnectFrameworkFactory.newFramework-Map-ModuleConnector-"
      xrefstyle="hyperlink"/></para>
    </section>
    <section xml:id="framework.connect.lifecycle">
      <title>Module Connector Life Cycle</title>

      <para>A module connector may hook into the Framework life cycle by providing
      a <xref linkend="org.osgi.framework.BundleActivator" xrefstyle="hyperlink"/>
      instance. The <code>BundleActivator</code> interface defines methods that the
      Framework invokes when the Framework is initialized and shutdown.</para>
      <section xml:id="framework.connect.starting">
        <title>Start</title>

        <para>When the Framework is initialized the system bundle enters the <xref
        linkend="org.osgi.framework.Bundle.STARTING" xrefstyle="hyperlink"/> state.
        At this point a valid <xref linkend="org.osgi.framework.BundleContext" xrefstyle="hyperlink"/>
        exists for the Framework. Before invoking extension bundle activators as defined by
        <xref linkend="framework.lifecycle.extension.start"/> the Framework must call
        the <code>ModuleConnector</code> method <xref 
        linkend="org.osgi.framework.connect.ModuleConnector.newBundleActivator--" xrefstyle="hyperlink"/>.
        If the module connector provides a bundle activator then the <xref
        linkend="org.osgi.framework.BundleActivator.start-BundleContext-" xrefstyle="hyperlink"/> method must be
        called before returning from the <code>Framework</code> <xref 
        linkend="org.osgi.framework.launch.Framework.init--" xrefstyle="hyperlink"/> method and before
        any extension bundle activator <code>start</code> methods are called. Any exception thrown by a
        module connector activator <code>start</code> method must be wrapped in a <code>BundleException</code> 
        and broadcast as an <xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/>.</para>

        <para>The bundle activator allows for the module connector to hook into the life cycle of the Framework
        itself. For example, this allows the module connector to register services, add listeners and install other
        bundles before anything else installed in the Framework can, including extension bundles. With the
        supplied system bundle context a module connector is able to influence the behavior of the Framework
        by registering various Framework hooks like the <xref 
        linkend="org.osgi.framework.hooks.resolver.ResolverHook" xrefstyle="hyperlink"/>. A resolver hook
        is useful for cases where the wiring of a connect bundle must not be allowed to wire to capabilities
        provided by other bundles installed in the Framework.</para>
      </section>
      <section>
        <title>Shutdown</title>

        <para>When the Framework is stopped it will reach start level zero and the Framework checks if there are any
        framework extensions activators to call the <code>stop</code> method on as defined by
        <xref linkend="framework.lifecycle.stopExtension"/>. After calling the <code>stop</code> method
        on the framework extension activators, the framework must call <xref
        linkend="org.osgi.framework.BundleActivator.stop-BundleContext-" xrefstyle="hyperlink"/>
        on the bundle activator provided by the module connector. Any exception thrown by a
        module connector activator <code>stop</code> method must be wrapped in a <code>BundleException</code> and broadcast as an 
        <xref linkend="org.osgi.framework.FrameworkEvent.ERROR" xrefstyle="hyperlink"/>.</para>

        <para>The Framework must guarantee that if the <code>start</code> method has executed successfully for
        module connector activator, that same <code>BundleActivator</code> object must be called on its
        <code>stop</code> method when the Framework is shutdown. After calling the <code>stop</code> method, that
        particular <code>BundleActivator</code> object must never be used again. A module connector activator that
        threw an exception during <code>start</code> must not be called on shutdown.</para>
      </section>
    </section>
    <section xml:id="framework.connect.service.provider">
      <title>Java Service Provider Configuration Support for Connect</title>

      <para>Similar to how a framework factory is obtained in <xref
      linkend="i3309166"/> the connect framework factory implementation name is
      obtained by reading the content of the configuration resource with the path 
      <code>META-INF/services/org.osgi.framework.connect.ConnectFrameworkFactory</code></para>

      <para>For example, if the <code>com.acme.osgi</code> framework has a
      connect factory class <code>com.acme.osgi.connect.Factory</code>, then it should have
      the following resource:</para>

      <programlisting>META-INF/services/org.osgi.framework.connect.ConnectFrameworkFactory</programlisting>

      <para>And the contents should be:</para>

      <programlisting># ACME Impl. for OSGi connect framework factory
com.acme.osgi.connect.Factory</programlisting>
    </section>
  </section>
  <section xml:id="framework.connect.bundle">
    <title>Connect Bundles</title>
    <para>A connect bundle is a <xref linkend="org.osgi.framework.Bundle" xrefstyle="hyperlink"/>
    installed in the framework that is connected to a
    <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> by a 
    <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/>.</para>

    <section xml:id="framework.connect.bundle.install">
      <title>Installing Connect Bundles</title>

      <para>When a bundle is installed, as defined by <xref
      linkend="i1314099"/>, a bundle location and an optional input stream
      to the content is provided with the <code>BundleContext</code> method <xref
      linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-" xrefstyle="hyperlink"/>.
      If a content input stream is provided to the call to <code>installBundle</code> then the Framework
      must use that input stream to read the content of the bundle being installed.
      In this case the Framework assumes that the management agent is not installing a 
      connect bundle and wants the content from the provided input stream to be
      installed into the Framework.
      </para>

      <para>When no input stream is provided to the <code>installBundle</code> method the Framework
      must call the <code>ModuleConnector</code> method <xref linkend="org.osgi.framework.connect.ModuleConnector.connect-String-"
      xrefstyle="hyperlink"/>. The <code>connect</code> method is given the bundle location
      specified in the call to <xref linkend="org.osgi.framework.BundleContext.installBundle-String-InputStream-"
      xrefstyle="hyperlink"/>. The <code>connect</code> method must do one of the following:</para>

      <itemizedlist>
        <listitem>
          <para>Throw a <code>BundleException</code> if the installation of the bundle is to be prevented.
          In this case the <code>BundleException</code> must be thrown from the <code>installBundle</code>
          method. Any other exception thrown by the <code>connect</code> method must propagate to the caller
          of the <code>installBundle</code> method.</para>
        </listitem>

        <listitem>
          <para>Return an empty <code>Optional</code> indicating that the Framework must create
          the input stream from which to read the bundle by interpreting, in an implementation
          dependent manner, the specified location.</para>
        </listitem>

        <listitem>
          <para>Return a present <code>Optional</code> indicating that the <xref linkend="org.osgi.framework.connect.ConnectModule"
          xrefstyle="hyperlink"/> present must be connected to the bundle and used to access content of the bundle.</para>
        </listitem>
      </itemizedlist>

      <para>If a <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> is found for the specified
      bundle location, then the Framework must call the <code>ConnectModule</code> method
      <xref linkend="org.osgi.framework.connect.ConnectModule.getContent--" xrefstyle="hyperlink"/> to access the
      current <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
      for the bundle. The <code>ConnectContent</code> must be used by the Framework to access content for the bundle's current
      <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/>. Any exception thrown by the
      <code>getContent</code> method must be wrapped in a <code>BundleException</code> and result in the 
      <code>BundleException</code> being thrown by the <code>installBundle</code> method.</para>
    </section>

    <section>
      <title>Updating Connect Bundles</title>
      <para>When a bundle is updated, as defined by <xref linkend="i3284680"/>, an optional input
      stream to the content is provided with the <code>Bundle</code> method
      <xref linkend="org.osgi.framework.Bundle.update-InputStream-" xrefstyle="hyperlink"/>.
      If the content input stream is provided to the call to <code>update</code> then the Framework
      must use that input stream to read the content of the bundle being updated. In this case
      the Framework assumes the management agent is not updating the bundle to a connect bundle and wants the
      content from the provided input stream to be used to update the bundle. This allows a
      management agent to update a connect bundle to a non-connect bundle.</para>

      <para>When no input stream is provided to the <code>update</code> method the Framework must call
      the <code>ModuleConnector</code> method <xref linkend="org.osgi.framework.connect.ModuleConnector.connect-String-"
      xrefstyle="hyperlink"/>. The <code>connect</code> method is given the location of the
      bundle being updated. The <code>connect</code> method must do one of the following:</para>

      <itemizedlist>
        <listitem>
          <para>Throw a <code>BundleException</code> if the update of the bundle is to be prevented.
          In this case the <code>BundleException</code> must be thrown from the <code>update</code>
          method. Any other exception thrown by the <code>connect</code> method must propagate to the caller
          of the <code>update</code> method.</para>
        </listitem>

        <listitem>
          <para>Return an empty <code>Optional</code> indicating that the Framework must create the
          input stream from which to read the updated bundle by interpreting, in an implementation
          dependent manner, this bundle's <code>Bundle-UpdateLocation</code> Manifest header, if present,
          or this bundle's original location.</para>
        </listitem>

        <listitem>
          <para>Return a present <code>Optional</code> indicating that the
          <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/>
          present must be connected to the bundle and used to access content
          of the updated bundle.</para>
        </listitem>
      </itemizedlist>
      
      <para>If a <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> is found for the specified
      bundle location, then the Framework must call the <code>ConnectModule</code> method
      <xref linkend="org.osgi.framework.connect.ConnectModule.getContent--" xrefstyle="hyperlink"/> to access the
      current <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
      for the updated bundle. The <code>ConnectContent</code> must be used by the Framework to access content for the bundle's current
      <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/>. Any exception thrown by the
      <code>getContent</code> method must be wrapped in a <code>BundleException</code> and result in the 
      <code>BundleException</code> being thrown by the <code>update</code> method.</para>

      <para>When no input stream is provided to the call to <code>update</code> it is possible to update
      a non-connect bundle to a connect bundle. Depending on the dynamic nature of the module
      connector, updating a connect bundle may result in the exact same
      <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/> being used for
      each updated revision for the bundle. This implies that the same class loader and content entries
      could be used for each updated revision.</para>
    </section>

    <section>
      <title>Connect Content</title>

      <para>The <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
      provides the Framework with all the information and resources necessary to represent a
      <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> for the connect
      bundle installed the Framework.</para>

      <section>
        <title>Opening Connect Content</title>

        <para>Before accessing the <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
        a Framework must first open the <code>ConnectContent</code> with the method
        <xref linkend="org.osgi.framework.connect.ConnectContent.open--" xrefstyle="hyperlink"/>.
        A Framework may open and close the content many times while the content is being used by the Framework.
        For example, to limit the number of resources kept open concurrently by the Framework.  The Framework
        must always ensure that the content is open before calling other methods on the
        <code>ConnectContent</code>. If any exception is thrown by the <code>open</code>
        method as a result of installing or updating a connect bundle then the exception
        must be wrapped in a <code>BundleException</code> and result in the <code>BundleException</code>
        being thrown by the bundle <code>install</code> or <code>update</code> method.</para>
      </section>

      <section>
        <title>Bundle Manifest Headers</title>
        <para>As defined by <xref linkend="i2654895"/> the bundle manifest headers can carry descriptive
        information about the bundle. A connect content may provide the bundle manifest headers
        to be used by the current revision of a bundle. When the framework needs to access a
        connect bundle's headers it must call the <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getHeaders--" xrefstyle="hyperlink"/>.
        If an empty <code>Optional</code> is returned then the Framework must lookup the content entry
        named <code>META-INF/MANIFEST.MF</code> and parse the bundle manifest itself as defined by
        <xref linkend="i2654895"/>.</para>

        <para>If the <code>Optional</code> returned has a map present then the map must be used to provide
        the raw, unlocalized, headers for the bundle.  The headers must be used the same way the raw header
        values would have been used from a parsed <code>META-INF/MANIFEST.MF</code> entry. That is the header
        keys and values that have semantic meaning must be used by the framework for the bundle and the 
        key/value pairs must be used for the <code>Dictionary</code> returned by the bundle
        <xref linkend="org.osgi.framework.Bundle.getHeaders--" xrefstyle="hyperlink"/> methods.
        The <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/> associated with the 
        connect content must also have its capabilities and requirements defined by the contents of the Map.</para>
      </section>

      <section>
        <title>Bundle Class Loader</title>

        <para>Connect content is typically managed and loaded by an entity outside of the Framework itself. This may also
        influence the way classes are defined and loaded for content outside of the Framework's control. For bundle
        revisions that are connected to a <xref linkend="org.osgi.framework.connect.ConnectContent"
        xrefstyle="hyperlink"/> the framework must call the connect content method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getClassLoader--" xrefstyle="hyperlink"/>
        before creating a Framework managed class loader for the connected bundle.</para>

        <para>If an empty <code>Optional</code> is returned by the connect content <code>getClassLoader</code> method then the
        Framework must create a class loader for the current bundle revision. The class loader created
        by the Framework must follow all the delegation rules defined by <xref linkend="i3174728"/> for a bundle
        class loader and it must implement the <xref linkend="org.osgi.framework.BundleReference" xrefstyle="hyperlink"/>
        interface. All resources found and classes defined by this class loader must have their content read using the
        connect content entries.  This is similar to how a bundle class loader works when the Framework is responsible
        for accessing and reading the bundle content JAR files directly. This framework implementation class loader
        must be returned by the the <code>BundleWiring</code> method <xref linkend="org.osgi.framework.wiring.BundleWiring.getClassLoader--"
        xrefstyle="hyperlink"/>.</para>

        <para>If the <code>Optional</code> returned by the connect content <code>getClassLoader</code> method has a
        class loader present then that <code>ClassLoader</code> must be used for the class loader of the
        <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>
        that is connected to the connect content.  The <code>ClassLoader</code> provided is not required to implement
        the <xref linkend="org.osgi.framework.BundleReference" xrefstyle="hyperlink"/> interface and is not required
        to follow the delegation rules defined by <xref linkend="i3174728"/>.  If the <code>ClassLoader</code> does
        not implement <code>BundleReference</code> then the Framework must wrap the <code>ClassLoader</code> with
        another <code>ClassLoader</code> that does implement <code>BundleReference</code>. The
        <xref linkend="org.osgi.framework.BundleReference.getBundle--" xrefstyle="hyperlink"/> must return the bundle
        associated with the <code>BundleWiring</code>.  This wrapper loader simply delegates all loading to the 
        <code>ClassLoader</code> provided connect content.  A Framework is free to always return a wrapper loader
        for the <code>BundleWiring</code> method <xref linkend="org.osgi.framework.wiring.BundleWiring.getClassLoader--"
        xrefstyle="hyperlink"/> even when the connect content loader does implement the <code>BundleReference</code> interface.</para>

        <para>A module connector is not required to provide a unique class loader for each <code>ConnectContent</code> instance.
        That is the same class loader can be used as the class loader for multiple <code>ConnectContent</code> instances and therefore
        get used by multiple bundles installed in the framework. If the connect bundle exports packages then the
        <code>ConnectContent</code> class loader will be delegated to by other class loaders managed by the framework.
        In other words, a bundle installed that is not connected with a 
        <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/> may import packages exported by 
        connect bundles and the OSGi Module Layer will do the correct delegation of class loads to the connect class loader as defined
        <xref linkend="i3174728"/> for exported packages.</para>

        <para>When a module connector implementation provides class loader implementations that are not the framework
        managed class loader there are limitations with respect to the behavior defined by the sections
        <xref linkend="framework.weavinghooks"/> and <xref linkend="i3270445"/>. Weaving hooks
        as defined by  <xref linkend="framework.weavinghooks"/> will not be notified of the classes defined by the module
        connect class loaders. This implies that the <xref linkend="org.osgi.framework.hooks.weaving.WeavingHook" xrefstyle="hyperlink"/>
        and <xref linkend="org.osgi.framework.hooks.weaving.WovenClassListener" xrefstyle="hyperlink"/> implementations
        will not be called for and will not be able to weave these classes. The activation policy as
        defined by <xref linkend="i3270445"/> also cannot be supported because The Framework will not have the necessary
        hooks into the module connector class loader implementation to cause bundle activation on class load.</para>

      </section>

      <section>
        <title>Connect Content Entries</title>

        <para>A <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/> instance
        provides access to content entries for a revision of a connect bundle. The connect content entries
        are used by the Framework for the following:</para>

        <itemizedlist>
          <listitem>
            <para>To provide content for the introspective methods on <xref linkend="org.osgi.framework.Bundle" xrefstyle="hyperlink"/>
            and <xref linkend="org.osgi.framework.wiring.BundleWiring" xrefstyle="hyperlink"/>. For example, the
            <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>,
            <xref linkend="org.osgi.framework.Bundle.getEntryPaths-String-" xrefstyle="hyperlink"/> and
            <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/> method.
            </para>
          </listitem>
          <listitem>
            <para>To provide content for loading classes and resources from the framework managed class loader.
            This is used when the <code>ConnectContent</code> method
            <xref linkend="org.osgi.framework.connect.ConnectContent.getClassLoader--" xrefstyle="hyperlink"/> returns
            an empty <code>Optional</code>.</para>
          </listitem>
        </itemizedlist>

        <para>To introspect all entry path names provided by a <code>ConnectContent</code> instance the method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getEntries--" xrefstyle="hyperlink"/>
        is used by the Framework. The result of the <code>getEntries</code> method is used by the Framework
        to provide results from the <code>Bundle</code> 
        <xref linkend="org.osgi.framework.Bundle.getEntryPaths-String-" xrefstyle="hyperlink"/>
        method and the <code>BundleWiring</code>
        <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/>
        method.</para>

        <para>To introspect a connect content entry the interface
        <xref linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry" xrefstyle="hyperlink"/>
        is used. A <code>ConnectEntry</code> can be looked up by its path name using the
        <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getEntry-String-" xrefstyle="hyperlink"/>.
        If the entry does not exist then an empty <code>Optional</code> is returned. A present
        <xref linkend="org.osgi.framework.connect.ConnectContent.ConnectEntry" xrefstyle="hyperlink"/>
        can be used by the Framework to provide <code>URL</code> objects that use a Framework specific
        protocol for bundle entries. For example, for the <code>URL</code> instances returned by
        <code>Bundle</code> method 
        <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>
        and the <code>BundleWiring</code> method
        <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/>.
        </para>

        <para>The Framework must ensure that the path value used for calls to <code>ConnectContent</code>
        method <xref linkend="org.osgi.framework.connect.ConnectContent.getEntry-String-" xrefstyle="hyperlink"/>
        do not start with slash ('/'). That is any paths used for calls to <code>Bundle</code> method
        <xref linkend="org.osgi.framework.Bundle.getEntry-String-" xrefstyle="hyperlink"/>
        or <code>BundleWiring</code> method
        <xref linkend="org.osgi.framework.wiring.BundleWiring.findEntries-String-String-int-" xrefstyle="hyperlink"/>
        must have the beginning slash ('/') removed before calling the <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.getEntry-String-" xrefstyle="hyperlink"/>.
        </para>
      </section>
      <section>
        <title>Closing Connect Content</title>

        <para>When a <xref linkend="org.osgi.framework.wiring.BundleRevision" xrefstyle="hyperlink"/>
        connected to a <xref linkend="org.osgi.framework.connect.ConnectContent" xrefstyle="hyperlink"/>
        no longer <xref linkend="org.osgi.framework.wiring.BundleWiring.isInUse--" xrefstyle="hyperlink"/>
        then the Framework must call the <code>ConnectContent</code> method
        <xref linkend="org.osgi.framework.connect.ConnectContent.close--" xrefstyle="hyperlink"/> in order
        to close the connect content. The Framework is free to <code>close</code> the <code>ConnectContent</code>
        at any other time during the life time of the Framework, but the Framework must always ensure 
        <code>ConnectContent</code> is opened before calling other methods on the <code>ConnectContent</code>.</para>
      </section>
    </section>

    <section>
      <title>Identify Connect Bundles</title>
      <para>A bundle installed in the framework can be identified as a connect bundle by introspection of
      the <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TAGS_ATTRIBUTE" xrefstyle="hyperlink"><code>tags</code></link> attribute on
      the <link linkend="org.osgi.framework.namespace.IdentityNamespace.IDENTITY_NAMESPACE" xrefstyle="hyperlink"><code>osgi.identity</code></link>
      capability for the current bundle revision. All connect bundle revisions must have a <code>tags</code>
      attribute value that contains the string value <link linkend="org.osgi.framework.connect.ConnectContent.TAG_OSGI_CONNECT"><code>osgi.connect</code></link>.
      For example, the following method determines if a <code>BundleRevision</code> is for a connect bundle:</para>

    <programlisting>boolean isConnect(BundleRevision revision) {
    return revision.getCapabilities("osgi.identity").stream().findFirst().map(c->{
        List&lt;String&gt; tags = (List&lt;String&gt;) c.getAttributes().get("tags");
        if (tags == null) {
            return false;
        }
        return tags.contains("osgi.connect");
    }).orElse(false);
}</programlisting>

      <para>For resources with the <link linkend="org.osgi.framework.namespace.IdentityNamespace.IDENTITY_NAMESPACE" xrefstyle="hyperlink"><code>osgi.identity</code>
      </link>capability and the attribute <link linkend="org.osgi.framework.namespace.IdentityNamespace.CAPABILITY_TYPE_ATTRIBUTE" xrefstyle="hyperlink"><code>type</code></link> value
      of <link linkend="org.osgi.framework.namespace.IdentityNamespace.TYPE_BUNDLE" xrefstyle="hyperlink"><code>osgi.bundle</code></link>, the <code>tags</code> attribute must
      be the same for the <link linkend="org.osgi.framework.namespace.BundleNamespace.BUNDLE_NAMESPACE" xrefstyle="hyperlink"><code>osgi.wiring.bundle</code></link>
      and the <link linkend="org.osgi.framework.namespace.HostNamespace.HOST_NAMESPACE" xrefstyle="hyperlink"><code>osgi.wiring.host</code></link>
      capabilities. The Framework must include the <code>osgi.connect</code> value in the <code>tags</code> attribute for all three capabilities.</para>
    </section>

    <section>
      <title>Launching from Persistent Storage</title>

      <para>The Framework must make a record of which bundles are connected to a 
      <xref linkend="org.osgi.framework.connect.ConnectModule" xrefstyle="hyperlink"/>.
      When the Framework is stopped it must persist the state of all the installed bundles,
      including the ones connected to a <code>ConnectModule</code>.  When a new Framework instance
      is created using the persistent storage which recorded the connection to a
      <code>ConnectModule</code>, the Framework must verify that a
      <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> is
      available that can connect the bundle location.</para>

      <para>If there is no <code>ConnectModule</code> present then the bundle installed must
      be discarded by the Framework as if it is not installed and a warning <code>FrameworkEvent</code>
      should be published or a warning should be logged.</para>
    </section>

    <section>
      <title>Extension Bundles</title>

      <para>Extension bundles as defined by the section <xref linkend="framework.module.extensionbundles"/> can
      deliver parts, or fragments, of the Framework implementation. A Framework that supports
      extension bundles will modify its own class loader to append the content of the framework
      extension as defined by <xref linkend="framework.module.extensionClassPath"/>.
      If an extension bundle is also a connect bundle then the framework must not attempt to
      perform the class path modifications of the Framework itself with the extension bundle.
      It is assumed that the <code>ModuleConnector</code> is managing that outside of the Framework.</para>
    </section>
  </section>

  <section>
    <title>Framework Utility Helpers</title>

    <para>The <xref linkend="org.osgi.framework.FrameworkUtil" xrefstyle="hyperlink"/> class
    contains utility methods which may be useful to bundles. For module connector implementations
    the <code>FrameworkUtil</code> method <xref 
    linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-" xrefstyle="hyperlink"/>
    needs additional help from the module connector to figure out the <code>Bundle</code> for a
    specified <code>Class</code>.</para>

    <section>
      <title>Helper Implementations</title>

      <para>A module connector implementation can hook into the <code>FrameworkUtil</code> class
      by providing an implementation of the <xref 
      linkend="org.osgi.framework.connect.FrameworkUtilHelper" xrefstyle="hyperlink"/> interface.
      Implementations of the <code>FrameworkUtilHelper</code> interface provide alternative
      implementations of the methods contained in the <code>FrameworkUtil</code> class.
      The <code>FrameworkUtil</code> method <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-" xrefstyle="hyperlink"/>
      method will fall back to calling the available <code>FrameworkUtilHelper</code> 
      <xref linkend="org.osgi.framework.connect.FrameworkUtilHelper.getBundle-Class-" xrefstyle="hyperlink"/> methods
      if the default implementation of the <code>FrameworkUtil</code>
      <xref linkend="org.osgi.framework.FrameworkUtil.getBundle-Class-" xrefstyle="hyperlink"/> method
      cannot figure out the <code>Bundle</code> for the specified <code>Class</code>. This allows a module
      connector implementation to return the <code>Bundle</code> object for classes that a module connector
      class loader defines.
      </para>
    </section>

    <section>
      <title>Java Service Provider Configuration Support for Helpers</title>

      <para>Similar to how a connect framework factory is obtained in <xref
      linkend="framework.connect.service.provider"/> the <code>FrameworkUtil</code> class discovers helper names
      by reading the content of the configuration resources with the path 
      <code>META-INF/services/org.osgi.framework.connect.FrameworkUtilHelper</code></para>

      <para>For example, if the module connector implementation <code>com.acme.osgi.connect.classpath</code> has a
      helper class <code>com.acme.osgi.connect.classpath.AcmeFrameworkUtilHelpler</code>, then it should have
      the following resource:</para>

      <programlisting>META-INF/services/org.osgi.framework.connect.FrameworkUtilHelper</programlisting>

      <para>And the contents should be:</para>

      <programlisting># ACME Impl. for FrameworkUtilHelper
com.acme.osgi.connect.classpath.AcmeFrameworkUtilHelpler</programlisting>

      <para>When the <xref linkend="org.osgi.framework.FrameworkUtil" xrefstyle="hyperlink"/> class
      is initialized it will discover the available <code>FrameworkUtilHelper</code>
      implementations as described in <xref linkend="i3300085"/> to obtain
      an immutable list of
      <xref linkend="org.osgi.framework.connect.FrameworkUtilHelper" xrefstyle="hyperlink"/>
      implementations. The list of helpers cannot change during the lifetime of the
      <code>FrameworkUtil</code> class.</para>
    </section>
  </section>

  <section>
    <title>Example Class Path Connector</title>
    <para>To illustrate how the Connect specification can be used the following is an example
    connector that discovers the JAR files contained on the Java class path and represents them
    as connect content.  This example assumes the module connector implementation
    exists on the class path along with other bundle JARs that it can discover. This example does not show
    how the JAR files are discovered on the running Java class path.</para>

    <programlisting>
public class ClassPathConnector implements ModuleConnector {

    @Override
    public Optional&lt;ConnectModule&gt; connect(String location)
            throws BundleException {
        return getJarFile(location).map((j) -&gt; () -&gt; new ClassPathContent(j));
    }

    private Optional&lt;JarFile&gt; getJarFile(String location) {
        // find a jar file for the specified location from the running class path
        return ...
    }

    static class ClassPathContent implements ConnectContent {
        private final JarFile jar;
        public ClassPathContent(JarFile jar) {
            this.jar = jar;
        }

        @Override
        public Optional&lt;ClassLoader&gt; getClassLoader() {
            // assume this classes class loader can be used by all JARs found
            // on the class path
            return Optional.of(getClass().getClassLoader());
        }

        @Override
        public Iterable&lt;String&gt; getEntries() throws IOException {
            return jar.stream().map((e) -&gt; e.getName()).
                    collect(Collectors.toList());
        }

        @Override
        public Optional&lt;ConnectEntry&gt; getEntry(String path) {
            return Optional.ofNullable(getConnectEntry(path));
        }

        ConnectEntry getConnectEntry(final String path) {
            final ZipEntry entry = jar.getEntry(path);
            return entry == null ? null : new ConnectEntry() {

                @Override
                public String getName() {
                    return path;
                }

                @Override
                public long getContentLength() {
                    return entry.getSize();
                }

                @Override
                public long getLastModified() {
                    return entry.getTime();
                }

                @Override
                public InputStream getInputStream() throws IOException {
                    return jar.getInputStream(entry);
                }
            };
        }

        @Override
        public Optional&lt;Map&lt;String, String&gt;&gt; getHeaders() {
            return Optional.empty();
        }

        @Override
        public void open() throws IOException {}

        @Override
        public void close() throws IOException {}
        
    }

    @Override
    public void initialize(File storage, Map&lt;String, String&gt; configuration) {}

    @Override
    public Optional&lt;BundleActivator&gt; newBundleActivator() {
        return Optional.empty();
    }
}

    </programlisting>
  </section>

  <section>
    <title>Security</title>
    <para>A <xref linkend="org.osgi.framework.connect.ModuleConnector" xrefstyle="hyperlink"/> implementation
    should be considered part of the Framework implementation when it is used to launch a new Framework. Just
    like Framework implementations can assume to have <code>AllPermission</code> granted, a module
    connector should have <code>AllPermission</code> granted. A module connector will have
    access to the bundle locations. A bundle location can be considered sensitive data that should
    be protected. Module connector implementations should not expose the bundle location strings they obtain
    without a necessary permission check, see
    <xref linkend="org.osgi.framework.Bundle.getLocation--" xrefstyle="hyperlink"/>.</para>
  </section>

  <xi:include href="../../../generated/javadoc/docbook/org.osgi.framework.connect.xml"/>
</chapter>
