<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="51" revision="$Id$"
         version="5.0" xml:id="service.permissionadmin"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Permission Admin Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.permissionadmin-version"
    linkend="org.osgi.service.permissionadmin"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Note: The Permission Admin has been superseded by the Conditional
    Permission Admin. See <xref linkend="service.condpermadmin"/>.</para>

    <para>In the Framework, a bundle can have a single set of permissions.
    These permissions are used to verify that a bundle is authorized to
    execute privileged code. For example, a <code>FilePermission</code>
    defines what files can be used and in what way.</para>

    <para>The policy of providing the permissions to the bundle should be
    delegated to a Management Agent. For this reason, the Framework provides
    the Permission Admin service so that a Management Agent can administrate
    the permissions of a bundle and provide defaults for all bundles.</para>

    <para>Related mechanisms of the Framework are discussed in <xref
    linkend="framework.security.securityoverview"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Status information</emphasis> - The Permission Admin
          Service must provide status information about the current
          permissions of a bundle.</para>
        </listitem>

        <listitem>
          <para><emphasis>Administrative</emphasis> - The Permission Admin
          Service must allow a Management Agent to set the permissions before,
          during, or after a bundle is installed.</para>
        </listitem>

        <listitem>
          <para><emphasis>Defaults</emphasis> - The Permission Admin Service
          must provide control over default permissions. These are the
          permissions for a bundle with no specific permissions set.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis><xref
          linkend="org.osgi.service.permissionadmin.PermissionAdmin"
          xrefstyle="hyperlink"/></emphasis> - The service that provides
          access to the permission repository of the Framework.</para>
        </listitem>

        <listitem>
          <para><emphasis><xref
          linkend="org.osgi.service.permissionadmin.PermissionInfo"
          xrefstyle="hyperlink"/></emphasis> - An object that holds the
          information needed to construct a <code>Permission</code>
          object.</para>
        </listitem>

        <listitem>
          <para><emphasis>Bundle location</emphasis> - The string that
          specifies the bundle location. This is described in <xref
          linkend="framework.lifecycle.bundleidentifiers"/>.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>org.osgi.service.permissionadmin package</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.406in"
                       contentwidth="7.000in"
                       fileref="permissionadmin-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Operation</title>

      <para>The Framework maintains a repository of permissions. These
      permissions are stored under the bundle location string. Using the
      bundle location allows the permissions to be set
      <emphasis>before</emphasis> a bundle is downloaded. The Framework must
      consult this repository when it needs the permissions of a bundle. When
      no specific permissions are set, the bundle must use the default
      permissions. If no default is set, the bundle must use
      <code>java.security.AllPermission</code>. If the default permissions are
      changed, a bundle with no specific permissions must immediately start
      using the new default permissions.</para>

      <para>The Permission Admin service is registered by the Framework's
      system bundle under the
      <code>org.osgi.service.permissionadmin.</code><xref
      linkend="org.osgi.service.permissionadmin.PermissionAdmin"
      xrefstyle="hyperlink"/> interface. This is an optional singleton
      service, so at most one Permission Admin service is registered at any
      moment in time.</para>

      <para>The Permission Admin service provides access to the permission
      repository. A Management Agent can get, set, update, and delete
      permissions from this repository. A Management Agent can also use a
      <code>SynchronousBundleListener</code> object to set the permissions
      during the installation or updating of a bundle.</para>
    </section>
  </section>

  <section>
    <title>Permission Admin service</title>

    <para>The Permission Admin service needs to manipulate the default
    permissions and the permissions associated with a specific bundle. The
    default permissions and the bundle-specific permissions are stored
    persistently. It is possible to set a bundle's permissions before the
    bundle is installed in the Framework because the bundle's location is used
    to set the bundle's permissions.</para>

    <para>The manipulation of a bundle's permissions, however, may also be
    done in real time when a bundle is downloaded or just before the bundle is
    downloaded. To support this flexibility, a
    <code>SynchronousBundleListener</code> object may be used by a Management
    Agent to detect the installation or update of a bundle, and set the
    required permissions before the installation completes.</para>

    <para>Permissions are activated before the first time a permission check
    for a bundle is performed. This means that if a bundle has opened a file,
    this file must remain usable even if the permission to open that file is
    removed at a later time.</para>

    <para>Permission information is <emphasis>not</emphasis> specified using
    <code>java.security.Permission</code> objects. The reason for this
    approach is the relationship between the required persistence of the
    information across the Framework restarts and the concept of class loaders
    in the Framework. Actual <code>Permission</code> classes must be
    subclasses of <code>Permission</code> and may be exported from any bundle.
    The Framework can access these permissions as long as they are exported,
    but the Management Agent would have to import all possible packages that
    contain permissions. This requirement would severely limit permission
    types. Therefore, the Permission Admin service uses the <xref
    linkend="org.osgi.service.permissionadmin.PermissionInfo"
    xrefstyle="hyperlink"/> class to specify permission information. Objects
    of this class are used by the Framework to create <code>Permission</code>
    objects.</para>

    <para><code>PermissionInfo</code> objects restrict the possible
    <code>Permission</code> objects that can be used. A
    <code>Permission</code> subclass can only be described by a
    <code>PermissionInfo</code> object when it has the following
    characteristics:</para>

    <itemizedlist>
      <listitem>
        <para>It must be a subclass of
        <code>java.security.Permission</code>.</para>
      </listitem>

      <listitem>
        <para>It must use the two-argument public constructor
        <code>type(name,actions)</code>.</para>
      </listitem>

      <listitem>
        <para>The class must be available to the Framework code from the
        system class path or from any exported package so it can be loaded by
        the Framework.</para>
      </listitem>

      <listitem>
        <para>The class must be public.</para>
      </listitem>
    </itemizedlist>

    <para>If any of these conditions is not met, the
    <code>PermissionInfo</code> object must be ignored and an error message
    should be logged.</para>

    <para>The permissions are always set as an array of
    <code>PermissionInfo</code> objects to make the assignment of all
    permissions atomic.</para>

    <para>The <code>PermissionAdmin</code> interface provides the following
    methods:</para>

    <itemizedlist>
      <listitem>
        <para><xref
        linkend="org.osgi.service.permissionadmin.PermissionAdmin.getLocations--"
        xrefstyle="hyperlink"/> - Returns a list of locations that have
        permissions assigned to them. This method allows a Management Agent to
        examine the current set of permissions.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.permissionadmin.PermissionAdmin.getPermissions-String-"
        xrefstyle="hyperlink"/> - Returns a list of
        <code>PermissionInfo</code> objects that are set for that location, or
        returns <code>null</code> if no permissions are set.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.permissionadmin.PermissionAdmin.setPermissions-String-PermissionInfo---"
        xrefstyle="hyperlink"/> - Associates permissions with a specific
        location, or returns <code>null</code> when the permissions should be
        removed.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.permissionadmin.PermissionAdmin.getDefaultPermissions--"
        xrefstyle="hyperlink"/> - This method returns the list of default
        permissions.</para>
      </listitem>

      <listitem>
        <para><xref
        linkend="org.osgi.service.permissionadmin.PermissionAdmin.setDefaultPermissions-PermissionInfo---"
        xrefstyle="hyperlink"/> - This method sets the default
        permissions.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>File Permission for Relative Path Names</title>

      <para>A <code>java.io.FilePermission</code> assigned to a bundle via the
      <code>setPermissions</code> method must receive special treatment if the
      path argument for the <code>FilePermission</code> is a relative path
      name. A relative path name is one that is not absolute. See the
      <code>java.io.File.isAbsolute</code> method for more information on
      absolute path names.</para>

      <para>When a bundle is assigned a <code>FilePermission</code> for a
      relative path name, the path name is taken to be relative to the
      bundle's persistent storage area. This allows additional permissions,
      such as <code>execute</code>, to be assigned to files in the bundle's
      persistent storage area. For example:</para>

      <programlisting>    java.io.FilePermission "-" "execute"</programlisting>

      <para>can be used to allow a bundle to execute any file in the bundle's
      persistent storage area.</para>

      <para>This only applies to <code>FilePermission</code> objects assigned
      to a bundle via the <code>setPermission</code> method. This does not
      apply to default permissions. A <code>FilePermission</code> for a
      relative path name assigned via the <code>setDefaultPermission</code>
      method must be ignored.</para>
    </section>
  </section>

  <section>
    <title>Security</title>

    <para>The Permission Admin service is a system service that can be abused.
    A bundle that can access and use the Permission Admin service has full
    control over the OSGi framework. However, many bundles can have
    <code>ServicePermission[PermissionAdmin,GET]</code> because all methods
    that change the state of the Framework require
    <code>AdminPermission</code>.</para>

    <para>No bundle must have
    <code>ServicePermission[PermissionAdmin,REGISTER]</code> for this service
    because only the Framework should provide this service.</para>
  </section>

  <xi:include href="../../../generated/javadoc/docbook/org.osgi.service.permissionadmin.xml"/>
</chapter>
