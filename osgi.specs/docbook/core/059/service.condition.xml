<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="59" revision="$Id$"
         version="5.0" xml:id="service.condition"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Condition Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.condition-version"
    linkend="org.osgi.service.condition"/></releaseinfo>
  </info>

  <section xml:id="service.condition.introduction">
    <title>Introduction</title>

    <para>In dynamic systems, such as OSGi, one of the more challenging
    problems can be to define when a system or part of it is ready to do some
    work. The answer can change depending on the individual perspective. The
    developer of a web server might say, the system is ready when the server
    starts listening on port 80. An application developer however would define
    the system as ready, when the database connection is up and all servlets
    are registered. Taking the application developers view, the web server
    should start listening on port 80 when the application is ready and not
    beforehand.</para>

    <para>The <xref linkend="framework.service" xrefstyle="template:%t"/>
    already provides all the necessary tools to register any service as an
    indicator for when a system is ready. The Condition Service Specification
    simply provides a specified service to signal such conditions. With this,
    other specifications and users have a known service to listen for such
    conditions.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Condition</emphasis> - Represents a particular state
          of the runtime.</para>
        </listitem>

        <listitem>
          <para><emphasis>Target</emphasis> - A filter used to match a
          required condition.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="service.condition.entities">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Condition</emphasis> - A service used to represent a
          state at runtime.</para>
        </listitem>

        <listitem>
          <para><emphasis>True Condition</emphasis> - A condition registered
          by the Framework with a well known name which is always available
          from the moment of Framework initialization.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="service.condition.operation">
    <title>Condition Service</title>

    <para><xref linkend="org.osgi.framework.startlevel.BundleStartLevel"
    xrefstyle="hyperlink"/> can be used to control the order in which bundles
    are activated when the Framework is launched. In some scenarios it can be
    helpful to have certain bundles activate before other bundles so that the
    necessary services provided by the previously activated bundles are ready
    before the later activated bundles start. However, such solutions have
    drawbacks in a dynamic system because dependencies can appear and
    disappear at any time. Also, there is no guarantee that when a bundle
    finishes activation, that it has registered all the services that it ever
    will for the lifetime of its active state.</para>

    <para>A better solution is to model ordering as a dependency. Once
    something is a service dependency, an injection framework, such as
    Declarative Services or CDI Integration, can defer component activation
    until the dependency is available. With a proper dependency, when the
    dependency disappears any components that depend on it will be deactivated
    automatically. Such a system will tend to automatically initialize and
    tear down components in the correct order.</para>

    <para>The <xref linkend="framework.service" xrefstyle="template:%t"/>
    provides an expressive tool for describing the aspects of a service
    through its service properties, see <xref
    linkend="framework.service.serviceproperties"/>, and for selecting and
    matching available services with the service filter, see <xref
    linkend="i2671413"/>. Dependency injection frameworks, such as Declarative
    Services and CDI Integration, use the expressive nature of the service
    layer by allowing a target option for dependencies. The target specifies a
    filter that is used to assert the properties provided by a specific
    dependency.</para>

    <para>The notion of a target for a dependency is very powerful and allows
    for additional control over when a component can be activated. With
    Declarative Services and CDI Integration, a dependency target can be
    specified via configuration. This gives the deployer of the system power
    to select specific services for dependencies and therefore control over
    what conditions are necessary for a component to be activated.</para>

    <para>Translating ordering dependencies to service dependencies is often
    straightforward to do, but some scenarios make it more challenging. For
    example, a component may depend upon a system wide state in order to be
    fully functional. This type of problem can be common when using the
    whiteboard pattern. An example of a whiteboard pattern is the previously
    mentioned web server. A servlet implementation is only required to
    register itself as a <emphasis>Servlet</emphasis> service and that servlet
    can start receiving requests from the web server implementation. However
    in some scenarios, a deployer may want to ensure that one or more specific
    servlets are registered before allowing the web server to begin processing
    requests. By default the web server does not need any servlets to be
    active, but a deployer may want to ensure at least one servlet is
    available. For this example, a deployer wants both <emphasis>Servlet
    1</emphasis> and <emphasis>Servlet 2</emphasis> to be available.</para>

    <figure pgwide="1">
      <title>Service Activation with a normal Whiteboard</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="normal-whiteboard-sequence.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Using Declarative Services, one could incorrectly try the following
    to achieve this:</para>

    <programlisting>// THIS WILL NEVER WORK
@Reference(target="(&amp;(servlet=1)(servlet=2))")
volatile List&lt;Servlet&gt; servlets;</programlisting>

    <para>This does not work because no individual servlet service will
    satisfy both properties. The result is that the list of servlet services
    will remain empty for the system and the web server will not start.
    Condition services provide a mechanism for declaring and controlling what
    conditions are necessary to enable a component. For example, with the
    listener whiteboard implementation the following condition service
    requirement could be specified:</para>

    <programlisting>@Reference(target="(osgi.condition.id=true)")
Condition requiredCondition;</programlisting>

    <para>This component requires the <xref
    linkend="service.condition-true.condition" xrefstyle="template:%t"/> which
    is always available at runtime. This allows the component to activate as
    soon as all of its other requirements are met. In addition, a deployer can
    now use configuration to change the target of the required condition. For
    example, the target could be changed to reference a condition that
    represents when all the servlets required by the deployer are available at
    runtime. For example, the following condition target could be used:</para>

    <programlisting xml:id="service.condition.into.example">(osgi.condition.id=application)</programlisting>

    <figure pgwide="1">
      <title>Service Activation with Condition</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="2.743in"
                     contentwidth="7.000in" fileref="condition-sequence.svg"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Conditions can also be enabled based on the availability of other
    conditions. This allows for more powerful aggregation of conditions for a
    system.</para>

    <para>The Condition that indicates that the servlets are ready could be
    implemented as follows:</para>

    <programlisting>@Component(property="osgi.condition.id=application")
public class ApplicationCondition implements Condition {
    @Reference(target="(servlet=1)")
    private Servlet servlet1;
    @Reference(target="(servlet=2)")
    private Servlet servlet2;
}</programlisting>

    <para>Please note, that the example Condition implementation above is just
    a simplified construct. When a service is registered, all service
    listeners are called in some sequence. This means, that the example
    Condition implementation above may observe the availability of a servlet
    service before other parties that are also interested in servlet services,
    such as the web server. Thus the registration of the Condition service
    should happen asynchronously, and perhaps even after a slight delay, so
    the framework has a chance to notify all service listeners regarding the
    relevant service.</para>

    <section xml:id="service.condition-true.condition">
      <title>True Condition</title>

      <para>The Framework will always register a default True Condition that
      all bundles can rely on being always available. The default True
      Condition will be registered during Framework initialization as the
      Framework registers framework services. It is registered with the <xref
      linkend="org.osgi.service.condition.Condition.CONDITION_ID"
      xrefstyle="hyperlink"/> property set to the value of <xref
      linkend="org.osgi.service.condition.Condition.CONDITION_ID_TRUE"
      xrefstyle="hyperlink"/>.</para>
    </section>
  </section>

  <section xml:id="service.condition.security">
    <title>Security</title>

    <section>
      <title>Conditions</title>

      <para>A Condition service has no function outside of providing a marker
      service to indicate a particular state and is therefore not required to
      be a trusted service.</para>
    </section>

    <section>
      <title>Minimum Implementation Permissions</title>

      <para>To implement and register a Condition service, a bundle must have
      the following permissions.</para>

      <programlisting>PackagePermission[org.osgi.service.condition,IMPORT]
ServicePermission[org.osgi.service.condition.Condition, REGISTER ]</programlisting>
    </section>

    <section>
      <title>Minimum Using Permissions</title>

      <para>No permissions are necessary to get a Condition service. Service
      Permission with the <code>GET</code> action for the Condition service
      must be granted by the framework, see <xref
      linkend="framework.security.impliedpermissions"/>. Note that the
      <code>org.osgi.service.condition</code> package does not necessarily
      need to be imported for a bundle to be able to get a Condition service
      unless the bundle actually has a runtime reference to the <xref
      linkend="org.osgi.service.condition.Condition" xrefstyle="hyperlink"/>
      type.</para>
    </section>
  </section>

  <xi:include href="../../../generated/javadoc/docbook/org.osgi.service.condition.xml"/>
</chapter>
