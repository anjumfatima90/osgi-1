<?xml version="1.0" encoding="utf-8"?>
<chapter label="135"
         revision="$Id$"
         version="5.0" xml:id="service.namespaces"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Common Namespaces Specification</title>

  <info>
    <releaseinfo xml:id="service.namespaces-version">Version 1.2</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>A key aspect of the OSGi general dependency model based on
    requirements and capabilities is the concept of a
    <emphasis>Namespace</emphasis>. A Namespace defines the semantics of a
    Requirement-Capability pair. The generic model is defined in the <xref
    linkend="i1777721"/>. This section defines a number of Namespaces that are
    not part of the <xref linkend="intro.core.release"
    xrefstyle="template:%t"/> specification. Unless an attribute is
    specifically overridden, all Namespaces inherit the attributes and
    directives of the default Namespace as defined <xref
    linkend="i1777761"/>.</para>

    <para>Each Namespace is defined with the following items:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Name</emphasis> - the name of an attribute or
        directive</para>
      </listitem>

      <listitem>
        <para><emphasis>Kind</emphasis> - Defines where the attribute or
        directive can be used</para>

        <itemizedlist>
          <listitem>
            <para><code>CA</code> - Capability Attribute</para>
          </listitem>

          <listitem>
            <para><code>CD</code> - Capability Directive</para>
          </listitem>

          <listitem>
            <para><code>RA</code> - Requirement Attribute</para>
          </listitem>

          <listitem>
            <para><code>RD</code> - Requirement Directive</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>M/O</emphasis> - Mandatory (<code>M</code>) or
        Optional (<code>O</code>)</para>
      </listitem>

      <listitem>
        <para><emphasis>Type</emphasis> - The data type</para>
      </listitem>

      <listitem>
        <para><emphasis>Syntax</emphasis> - Any syntax rules. The syntax
        refers in general to the syntaxes defined in <xref
        linkend="i1777866"/> and <xref linkend="i1777884"/>.</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Versioning</title>

      <para>In general, capabilities in a Namespace are versioned using
      Semantic Versioning. See <xref
      linkend="service.namespaces-coresemver"/>. Therefore, a capability will
      specify a single version and a requirement will specify a version range.
      See <xref linkend="service.namespaces-osgi.extender.namespace"
      xrefstyle="template:%t"/> for an example.</para>

      <para>For some Namespaces, capabilities are not versioned using Semantic
      Versioning. The versioning scheme used in those Namespaces will be
      described in the specification for the Namespace.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.extender.namespace">
    <title>osgi.extender Namespace</title>

    <para>An <emphasis>Extender</emphasis> is a bundle that uses the life
    cycle events from another bundle, the <emphasis>extendee</emphasis>, to
    extend that bundle's functionality when that bundle is active. It can use
    metadata (headers, or files inside the extendee) to control its
    functionality. Extendees therefore have a dependency on the Extender that
    can be modeled with the <code>osgi.extender</code> Namespace. The
    definition for this Namespace can be found in the following table and the
    <xref linkend="org.osgi.namespace.extender.ExtenderNamespace"
    xrefstyle="hyperlink"/> class.</para>

    <table pgwide="1">
      <title>osgi.extender Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.extender</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the extender. These names are
            defined in their respective specifications and should in general
            use the specification top level package name. For example,
            <code>org.acme.foo</code>. The OSGi Working Group reserves names that
            start with "<code>osgi.</code>".</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>Version</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A version. This version must correspond to the
            specification of the extender.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Specifications for extenders (Blueprint, Declarative Services, etc.)
    should specify the values for these attributes. Extenders that provide
    such a capability should list the packages that they use in their
    specification in the <code>uses</code> directive of that capability to
    ensure class space consistency. For example a Declarative Services
    implementation could declare its capability with the following manifest
    header:</para>

    <programlisting>Provide-Capability: osgi.extender; 
   osgi.extender="osgi.component";
   uses:="org.osgi.service.component";
   version:Version="1.3"</programlisting>

    <para>A bundle that depends on a Declarative Services implementation
    should require such an extender with the following manifest header:</para>

    <programlisting>Require-Capability: osgi.extender;
  filter:="(&amp;(osgi.extender=osgi.component)(version&gt;=1.3)(!(version&gt;=2.0)))"</programlisting>

    <para>Extenders can extend an extendee bundle even if that bundle does not
    require the extender, unless the extender's specification explicitly
    forbids this. It is recommended that an extender should only extend a
    bundle if one of the following is true:</para>

    <itemizedlist>
      <listitem>
        <para>The bundle's wiring has a required wire for at least one
        <code>osgi.extender</code> capability with the name of the extender
        and the first of these required wires is wired to the extender.</para>
      </listitem>

      <listitem>
        <para>The bundle's wiring has no required wire for an
        <code>osgi.extender</code> capability with the name of the
        extender.</para>
      </listitem>
    </itemizedlist>

    <para>Otherwise, the extender should not extend the bundle.</para>

    <section>
      <title>Extenders and Framework Hooks</title>

      <para>The Framework provides a number of hooks that allow groups of
      bundles to be scoped. For example, the <emphasis>Subsystem Service
      Specification</emphasis>. An extender may want to extend the complete
      set of bundles installed in the Framework even when extendee bundles are
      hidden from the extender. The system bundle context provides a complete
      view of the bundles and services available in the Framework even if
      Framework hooks are used to scope groups of bundles. The system bundle
      context can be used by an extender to track all bundles installed in the
      Framework regardless of how Framework hooks are used to scope groups of
      bundles. This is useful in scenarios where several scoped groups contain
      bundles that require an extender. Instead of requiring an extender to be
      installed in each scoped group of bundles, a single extender that uses
      the system bundle context to track extendees can be installed to extend
      all scoped groups of bundles.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.contract.namespace">
    <title>osgi.contract Namespace</title>

    <para>Products or technologies often have a number of related APIs
    consisting of a large set of packages. Some IDEs have not optimized for
    OSGi and requires work for each imported package. In these development
    environments using modularized systems tends to require a significant
    amount of manual effort to manage the imported packages.</para>

    <para>The <code>osgi.contract</code> Namespace addresses this IDE
    deficiency. It allows a developer to specify a single name and version for
    a contract that can then be expanded to a potentially large number of
    packages. For example, a developer can then specify a dependency on Java
    Enterprise Edition 6 contract that can be provided by an application
    server.</para>

    <para>The <code>osgi.contract</code> Namespace provides such a name and
    binds it to a set of packages with the uses constraint. The bundle that
    declares this contract must then import or export each of the listed
    packages with the correct versioning. Such a bundle is called a
    <emphasis>contract bundle</emphasis>. The contract bundle must ensure that
    it is bound to the correct versions of the packages contained within the
    contract it is providing. If the contract bundle imports the packages
    which are specified as part of the contract then proper matching
    attributes must be used to make sure it is bound to the correct versions
    of the packages.</para>

    <para>Additionally, the <code>osgi.contract</code> Namespace can be used
    in cases where API is defined by parties that do not use Semantic
    Versioning. In those cases, the version of the exported package can be
    unclear and so it is difficult to specify a meaningful version range for
    the package import. In such cases, importing the package
    <emphasis>without</emphasis> specifying a version range and specifying a
    requirement in the <code>osgi.contract</code> Namespace can provide a way
    to create portable bundles that use the API. OSGi has defined contract
    names for a number of such APIs. See <xref
    linkend="service.namespaces-portable.java.contracts.ref"/> for more
    information.</para>

    <para>An <code>osgi.contract</code> capability can then be used in the
    following ways:</para>

    <itemizedlist>
      <listitem>
        <para>IDEs can use the information in the <code>uses</code> directive
        to make all those packages available on the build path. In this case
        the developer no longer has to specify each package separately.</para>
      </listitem>

      <listitem>
        <para>During run time the <code>uses</code> clause is used to enforce
        that all packages in the contract form a consistent class
        space.</para>
      </listitem>
    </itemizedlist>

    <para>The <code>uses</code> directive will make it impossible to get wired
    to packages that are not valid for the contract. Since the uses constrains
    enforce the consistency, it is in principle not necessary to version the
    imported packages on client bundles since only the correctly versioned
    packages can be used. Contracts are aggregates and therefore make clients
    depend on the whole and all their transitive dependencies, even if the
    client only uses a single package of the contract.</para>

    <para>The recommended way of using contracts is to create a contract
    bundle that provides the <code>osgi.contract</code> capability and imports
    the packages with their required version range. For example:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=JavaServlet;
    version:Version=2.5;
    uses:="javax.servlet,javax.servlet.http"
Export-Package:
    javax.servlet;      version="2.5",
    javax.servlet.http; version="2.5"</programlisting>

    <para>A contract may support multiple versions of a named contract. Such a
    contract must use a single capability for the contract name that specifies
    a list of all the versions that are supported. For example, the
    JavaServlet 3.1 contract capability would be specified with the
    following:</para>

    <programlisting>Provide-Capability: osgi.contract;
    osgi.contract=JavaServlet;
    version:List&lt;Version&gt;="2.5,3.0,3.1";
    uses:=
        "javax.servlet,
        javax.servlet.annotation,
        javax.servlet.descriptor,
        javax.servlet.http"
Export-Package:
    javax.servlet;            version="3.1",
    javax.servlet.annotation; version="3.1",
    javax.servlet.descriptor; version="3.1",
    javax.servlet.http;       version="3.1"</programlisting>

    <para>A client bundle that requires the Servlet 2.5 contract can then have
    the following manifest:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=JavaServlet)(version=2.5))",
Import-Package:
    javax.servlet, javax.servlet.http</programlisting>

    <para>The client bundle will be constrained by the contract's uses
    constraints and automatically gets the correct packages. In this example,
    no semantic versioning is used for the contract because the Servlet
    Specifications do not use semantic versioning (version 3.0 is backward
    compatible with 2.X).</para>

    <para>In this model it is even possible to use the normally not
    recommended DynamicImport-Package header with a wild card since also this
    header is constrained by the uses constraints. However, using a full
    wildcard can also dynamically import packages that are not part of the
    contract. To prevent these unwanted dynamic imports, the exporter could
    include an attribute on the exports. For example:</para>

    <programlisting>Require-Capability: osgi.contract;
    filter:="(&amp;(osgi.contract=JavaServlet)(version=2.5))"
DynamicImport-Package: 
    *;JavaServlet=contract</programlisting>

    <para>However, this model requires the exporter to specify an agreed
    attribute. The contract bundle does not require such coordination; it also
    allows the package exporters to reside in different and unrelated
    bundles.</para>

    <para>The definition of the <code>osgi.contract</code> Namespace is in the
    following table and in the <xref
    linkend="org.osgi.namespace.contract.ContractNamespace"
    xrefstyle="hyperlink"/> class. See <xref
    linkend="service.namespaces-portable.java.contracts.ref"/>.</para>

    <table pgwide="1">
      <title>osgi.contract Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="2.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3.5*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.contract</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><code>String</code></entry>

            <entry><code>symbolic-name</code></entry>

            <entry><para>A symbolic name for the contract.</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>Version+</code></entry>

            <entry><code>version</code></entry>

            <entry><para>A list of versions for the contract. A contract that
            supports multiple versions must use a single capability with a
            version attribute that lists all versions
            supported.</para></entry>
          </row>

          <row>
            <entry><code>uses</code></entry>

            <entry><code>CD</code></entry>

            <entry><code>O</code></entry>

            <entry><code>String</code></entry>

            <entry><para><code>package-name</code></para><para><code>( ','
            package-name )</code></para></entry>

            <entry><para>For a contract, the standard uses clause is used to
            indicate which packages are part of the contract. The imports or
            exports of those packages link these packages to a particular
            version.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Versioning</title>

      <para>As the <code>osgi.contract</code> Namespace follows the versioning
      of the associated contract, capabilities in this Namespace are
      <emphasis>not</emphasis> semantically versioned. The associated
      contracts are often versioned using marketing or other versioning
      schemes and therefore the version number cannot be used as an indication
      of backwards compatibility.</para>

      <para>As a result, capabilities in the <code>osgi.contract</code>
      Namespace use a <emphasis>discrete</emphasis> versioning scheme. In such
      a versioning scheme, each version is treated as separate without any
      implied relation to another version. A capability lists
      <emphasis>all</emphasis> compatible versions. A requirement only selects
      a single version.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.service.namespace">
    <title>osgi.service Namespace</title>

    <para>The Service Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that potentially can register a specific service.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given service.</para>
      </listitem>

      <listitem>
        <para>Used as template for specifications like Blueprint and
        Declarative Services to express their provided and referenced services
        in the Repository model, see the <emphasis>Repository Service
        Specification</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it can register
    such a service with at least the given custom attributes as service
    properties. At resolve time this is a promise since there is no guarantee
    that during runtime the bundle will actually register such a service;
    clients must handle this with the normal runtime dependency managers like
    Blueprint, Declarative Services, or others.</para>

    <para>See the following table and the <xref
    linkend="org.osgi.namespace.service.ServiceNamespace"
    xrefstyle="hyperlink"/> class for this Namespace definition.</para>

    <table pgwide="1">
      <title>osgi.service Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="3*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>objectClass</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>List</code></para><para><code>&lt;String&gt;</code></para></entry>

            <entry><para><code>qname</code></para><para><code>(','
            qname)*</code></para></entry>

            <entry><para>The fully qualified name of the object class of the
            service.</para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that will be provided as service
            properties if they do not conflict with the service properties
            rules and are not private service properties. Private properties
            start with a full stop (<code>'.' \u002E</code>).</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Versioning</title>

      <para>Capabilities in the <code>osgi.service</code> Namespace are
      <emphasis>not</emphasis> versioned. The package of a service's object
      class is generally versioned and the package can be associated with the
      capability via the <code>uses</code> directive.</para>
    </section>
  </section>

  <section xml:id="service.namespaces-osgi.implementation.namespace">
    <title>osgi.implementation Namespace</title>

    <para>The Implementation Namespace is intended to be used for:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing a bundle from resolving if there is not at least one
        bundle that provides an implementation of the specified specification
        or contract.</para>
      </listitem>

      <listitem>
        <para>Providing uses constraints to ensure that bundles which require
        an implementation of a specification or contract will be wired
        appropriately by the framework.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle
        requires a given specification or contract implementation.</para>
      </listitem>

      <listitem>
        <para>Used as a general capability Namespace for specifications or
        contracts to express their provided function in the Repository model,
        see the <emphasis>Repository Service Specification</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>A bundle providing this capability indicates that it implements a
    specification or contract with the specified name and version. For
    example, the <emphasis>Asynchronous Service Specification</emphasis> would
    provide the following capability:</para>

    <programlisting>Provide-Capability: osgi.implementation;
    osgi.implementation="osgi.async";
    version:Version="1.0";
    uses:="org.osgi.service.async"</programlisting>

    <para>See the following table and the <xref
    linkend="org.osgi.namespace.implementation.ImplementationNamespace"
    xrefstyle="hyperlink"/> class for this Namespace definition.</para>

    <table pgwide="1">
      <title>osgi.implementation Namespace</title>

      <tgroup cols="6">
        <colspec colnum="1" colwidth="3.5*"/>

        <colspec colnum="2" colwidth="1*"/>

        <colspec colnum="3" colwidth="1*"/>

        <colspec colnum="4" colwidth="1.5*"/>

        <colspec colnum="5" colwidth="2.5*"/>

        <colspec colnum="6" colwidth="7*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>Kind</entry>

            <entry>M/O</entry>

            <entry>Type</entry>

            <entry>Syntax</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.implementation</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>String</code></para></entry>

            <entry><para><code>symbolic-name</code></para></entry>

            <entry><para>The symbolic name of the specification or contract.
            The OSGi Working Group reserves names that start with
            "<code>osgi.</code>".</para></entry>
          </row>

          <row>
            <entry><code>version</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>M</code></entry>

            <entry><para><code>Version</code></para></entry>

            <entry><para><code>version</code></para></entry>

            <entry><para>The version of the implemented specification or
            contract. </para></entry>
          </row>

          <row>
            <entry><code>*</code></entry>

            <entry><code>CA</code></entry>

            <entry><code>O</code></entry>

            <entry><code>*</code></entry>

            <entry><code>*</code></entry>

            <entry><para>Custom attributes that can be used to further
            identify the implementation</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="service.namespaces-osgi.unresolvable.namespace">
    <title>osgi.unresolvable Namespace</title>

    <para>The Unresolvable Namespace is intended to be used to mark a bundle
    as unresolvable:</para>

    <itemizedlist>
      <listitem>
        <para>Preventing the bundle from resolving since it is intended for
        compilation use only and is not intended for runtime use.</para>
      </listitem>

      <listitem>
        <para>Providing a hint to the provisioning agent that the bundle must
        not be included in a provisioning solution.</para>
      </listitem>
    </itemizedlist>

    <para>For example, a bundle that must be unresolvable at runtime can
    include the following requirement:</para>

    <programlisting>Require-Capability: osgi.unresolvable;
  filter:="(&amp;(must.not.resolve=*)(!(must.not.resolve=*)))"</programlisting>

    <para>The filter expression in the example above always evaluates to
    <code>false</code>.</para>

    <para>See the <xref
    linkend="org.osgi.namespace.unresolvable.UnresolvableNamespace"
    xrefstyle="hyperlink"/> class for this Namespace definition.</para>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.contract.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.extender.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.service.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.implementation.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.namespace.unresolvable.xml"/>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed xml:id="i1772882"><title>Specification
      References</title><biblioid class="uri"><link
      xlink:href="https://docs.osgi.org/reference/"/></biblioid></bibliomixed>

      <bibliomixed
      xml:id="service.namespaces-portable.java.contracts.ref"><title>Portable
      Java Contract Definitions</title><biblioid class="uri"><link
      xlink:href="https://docs.osgi.org/reference/portable-java-contracts.html"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i1777721"><title>Resources API
      Specification</title>OSGi Core, Chapter 6 Resource API
      Specification</bibliomixed>

      <bibliomixed xml:id="i1777761"><title>Framework Namespaces
      Specification</title>OSGi Core, Chapter 8 Framework Namespaces
      Specification</bibliomixed>

      <bibliomixed xml:id="i1777866"><title>General Syntax
      Definitions</title>OSGi Core, General Syntax Definitions</bibliomixed>

      <bibliomixed xml:id="i1777884"><title>Common Headers</title>OSGi Core,
      Chapter 3, Common Header Syntax</bibliomixed>

      <bibliomixed xml:id="service.namespaces-coresemver"><title>Semantic
      Versioning</title>OSGi Core, Chapter 3, Semantic
      Versioning</bibliomixed>
    </bibliolist>
  </section>

  <section>
    <title>Changes</title>

    <itemizedlist>
      <listitem>
        <para>Added <xref
        linkend="service.namespaces-osgi.unresolvable.namespace"/>.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
