<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="148"
         revision="$Id$"
         version="5.0" xml:id="service.clusterinfo"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Cluster Information Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.clusterinfo-version"
    linkend="org.osgi.service.clusterinfo"/></releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>Modern enterprise applications are most often deployed on
    distributed infrastructure such as a private or public cloud environment,
    instead of on a single server. This is done to distribute the application
    load, to replicate the application to guarantee availability or to exploit
    dedicated hardware for certain application functionality (for example, a
    database server).</para>

    <para>The unit of management is often no longer a single physical machine.
    Server infrastructure is nowadays mostly offered in a virtualized fashion,
    such as hardware virtualization using a hypervisor or operating system
    virtualization using containers. Potentially these can also be
    hierarchically managed, for example having multiple containers running
    inside a virtual machine. Therefore, it becomes key to manage an
    application running on a cluster of such (virtual) machines and/or
    containers.</para>

    <para>Also in the context of the Internet of Things (IoT), often a number
    of gateway devices is deployed in the network that connect various sensors
    and actuators creating a smart environment. Again, it becomes key to
    discover and manage these devices, and query their capabilities.</para>

    <para>The OSGi specification already provides chapters describing how to
    deploy software on remote infrastructure, how to call remote services or
    how manage a remote OSGi framework. In this chapter we define an API for a
    management agent to discover, list and inspect available nodes in the
    cluster.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Cluster</emphasis> - A cluster is a collection of
          nodes connected by a network. Most often the nodes are managed by a
          public or private cloud provider.</para>
        </listitem>

        <listitem>
          <para><emphasis>Node</emphasis> - A node is a discoverable entity in
          the cluster, for example a physical machine, a virtual machine (VM),
          a container or an OSGi framework.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>NodeStatus</emphasis> - The Node Status service
          represents a node in the cluster. This can be any entity in the
          cluster such as a database server, a virtual machine, a container,
          an OSGi framework, etc.</para>
        </listitem>

        <listitem>
          <para><emphasis>FrameworkNodeStatus</emphasis> - The Framework Node
          Status service represents an OSGi framework in the cluster.</para>
        </listitem>

        <listitem>
          <para><emphasis>FrameworkManager</emphasis> - The FrameworkManager
          service provides an interface to manage an OSGi framework in the
          cluster.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Clusterinfo Entity overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.750in"
                       contentwidth="4.000in"
                       fileref="clusterinfo-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>OSGi frameworks in a cluster</title>

    <para>We distinguish two types of nodes in a cluster. On the one hand we
    have OSGi frameworks, which publish their presence using a Framework Node
    Status service. On the other hand there can be other nodes in the cluster,
    such as the virtual machines or containers the OSGi frameworks are running
    on, or an external server such as a database. These can be represented
    using a Node Status service.</para>

    <para>When an OSGi framework is part of a cluster, this means it gets
    access to remote services of any other OSGi framework in that cluster.
    Ensuring the discovery, visibility and access of remote services within
    the cluster is the responsibility of the <xref
    linkend="service.remoteserviceadmin"/>.</para>

    <para>An example cluster deployment is shown in <xref
    linkend="service.clusterinfo-figure.cluster.deployment"
    xrefstyle="template:Figure %n on page %p"/>. Here, a cluster consisting of
    three virtual machines or containers has deployed a total of four OSGi
    frameworks. Each OSGi framework has a Cluster Information implementation
    running that exposes a Framework Node Status service. Besides these, there
    can also be an entity managing the virtual machines/containers (for
    example, the cloud provider), that exposes three Node Status services, one
    for each VM/container. In this case, each Framework Node Status will have
    a parent id pointing to the id of the Node Status of the VM/container it
    is deployed on.</para>

    <figure xml:id="service.clusterinfo-figure.cluster.deployment">
      <title>Example cluster deployment</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="3.750in"
                     contentwidth="4.000in" fileref="clusterinfo.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Node Status Service</title>

    <para>The <xref linkend="org.osgi.service.clusterinfo.NodeStatus"
    xrefstyle="hyperlink"/> service advertises the availability of a node in
    the cluster. This node can be any entity in the cluster such as a physical
    machine, a virtual machine, a container or an OSGi framework.</para>

    <para>The Node Status service provides metadata about the node via its
    service properties. Each Node Status must provide an id and cluster name.
    Optionally additional service properties can be provided such as the
    physical location of the node, the endpoints at which this node can be
    accessed, etc. These service properties can be converted to a <xref
    linkend="org.osgi.service.clusterinfo.dto.NodeStatusDTO"
    xrefstyle="hyperlink"/> to have type-safe access to these properties using
    the <xref linkend="util.converter"/>.</para>

    <table>
      <title>Service properties of the NodeStatus service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.3*"/>

        <colspec colnum="2" colwidth="0.7*"/>

        <colspec colnum="3" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>osgi.clusterinfo.id</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The globally unique ID for this node. For example the
            Docker ID if this node is a Docker container, or the framework
            UUID if this node is an OSGi framework.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.cluster</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The name of the cluster this node belongs
            to.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.parent</code></entry>

            <entry><code>String</code></entry>

            <entry><para>In the case this node is part of or embedded in
            another node, this field contains the id of the parent node. For
            example multiple virtual machines could run on the same physical
            node.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.endpoint</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>The endpoint(s) at which this node can be accessed
            from the viewpoint of the consumer of the service.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.endpoint.private</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Private endpoint(s) at which this node can be
            accessed from within the cluster only.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.vendor</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The vendor name of the cloud/environment in which the
            node operates.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.version</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The version of the cloud/environment in which the
            node operates. The value follows the versioning scheme of the
            cloud provider and may therefore not comply with the OSGi
            versioning syntax.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.country</code></entry>

            <entry><code>String</code></entry>

            <entry><para>ISO 3166-1 alpha-3 location where this node is
            running, if known.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.location</code></entry>

            <entry><code>String</code></entry>

            <entry><para>ISO 3166-2 location where this node is running, if
            known. This location is more detailed than the country code as it
            may contain province or territory.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.region</code></entry>

            <entry><code>String</code></entry>

            <entry><para>Something smaller than a country and bigger than a
            location (for example, us-east-1 or other cloud-specific
            location)</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.zone</code></entry>

            <entry><code>String</code></entry>

            <entry><para>Regions are often subdivided in zones that represent
            different physical locations. The zone can be provided
            here.</para></entry>
          </row>

          <row>
            <entry><code>osgi.clusterinfo.tags</code></entry>

            <entry><code>String+</code></entry>

            <entry><para>Tags associated with this node that can be
            contributed to by the provider and also by bundles.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>The Node Status service can also provide access to some dynamic
    properties of the node. The <code>getMetrics</code> method allows to query
    key-value pairs, that are specific for that node. For example, for an OSGi
    framework these could be CPU and memory usage, for a database node these
    could be the number of database reads and writes, and for a VM these could
    be metrics made accessible by the cloud provider. In this case the service
    implementor can provide DTOs to have a type-safe way to access these
    metrics by converting the returned map to one of these DTOs. For example,
    an implementation could expose JMX metrics together with a type-safe
    DTO:</para>

    <programlisting>public class JMXMetricsDTO extends DTO {
  /**
   * The number of processors available
   */
  public int availableProcessors;

  /**
   * The average system load
   */
  public float systemLoadAverage; 

  /**
   * The maximal amount of heap memory available to the JVM
   */
  public long heapMemoryMax;

  /**
   * The amount of heap memory used by the JVM
   */
  public long heapMemoryUsed;

  /**
   * The maximal amount of non-heap memory available to the JVM
   */
  public long nonHeapMemoryMax;

  /**
   * The amount of non-heap memory used by the JVM
   */
  public long nonHeapMemoryUsed; 
}</programlisting>

    <para>Such DTO can be used to obtain metrics from a
    <code>NodeStatus</code> service as follows: <programlisting>// From service registry
NodeStatus ns = ...;
// Obtain all metrics for this node
Map&lt;String, Object&gt; metrics = ns.getMetrics();

// Convert the metrics map to a DTO for type-safe access
JMXMetricsDTO dto = Converters.standardConverter().convert(metrics)
                              .to(JMXMetricsDTO.class);

// Use metrics
System.out.println("System Load Average: " + dto.systemLoadAverage);</programlisting></para>
  </section>

  <section>
    <title>Framework Node Status Service</title>

    <para>In case the cluster node is an OSGi framework, the <xref
    linkend="org.osgi.service.clusterinfo.FrameworkNodeStatus"
    xrefstyle="hyperlink"/> service is used to represent the node.
    <code>FrameworkNodeStatus</code> extends <code>NodeStatus</code>, and the
    node id is the OSGi framework UUID. Next to the Node Status service
    properties, this service has some additional service properties describing
    the OSGi and Java runtime:</para>

    <table>
      <title>Additional service properties of the FrameworkNodeStatus
      service</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="2.2*"/>

        <colspec colnum="2" colwidth="0.8*"/>

        <colspec colnum="3" colwidth="3.5*"/>

        <thead>
          <row>
            <entry>Service Property Name</entry>

            <entry>Type</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>org.osgi.framework.version</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The OSGi framework version.</para></entry>
          </row>

          <row>
            <entry><code>org.osgi.framework.processor</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The OSGi framework processor
            architecture.</para></entry>
          </row>

          <row>
            <entry><code>org.osgi.framework.os_name</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The OSGi framework operating system
            name.</para></entry>
          </row>

          <row>
            <entry><code>java.version</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The Java version.</para></entry>
          </row>

          <row>
            <entry><code>java.runtime.version</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The Java runtime version.</para></entry>
          </row>

          <row>
            <entry><code>java.specification.version</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The Java specification version.</para></entry>
          </row>

          <row>
            <entry><code>java.vm.version</code></entry>

            <entry><code>String</code></entry>

            <entry><para>The Java VM version.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Similar to the Node Status service, the service properties of the
    Framework Node Status service can be converted to a <xref
    linkend="org.osgi.service.clusterinfo.dto.FrameworkNodeStatusDTO"
    xrefstyle="hyperlink"/> to have type-safe access to these properties using
    the <xref linkend="util.converter"/>.</para>

    <para>The Framework Node Status service also extends the <xref
    linkend="org.osgi.service.clusterinfo.FrameworkManager"
    xrefstyle="hyperlink"/> interface, which provides a management interface
    for the OSGi framework. This allows a remote management agent to interact
    with the OSGi framework. The Framework Node Status service can be exported
    remotely with Remote Services, however alternative mechanisms to
    distribute this service are also permitted. For example, the
    FrameworkManager interface can also be made available through the <xref
    linkend="service.rest"/>.</para>

    <para>The following example uses the <code>NodeStatus</code> properties
    from a <code>FrameworkNodeStatus</code> service to see what country the
    framework is running in. If it is running in Germany a bundle specific for
    that country is installed: <programlisting>@Component
public class FrameworkProvisioner {
    private static final Converter CONVERTER = Converters.standardConverter();

    @Reference(cardinality = MULTIPLE, policy = DYNAMIC)
    void addFramework(FrameworkNodeStatus fns, Map&lt;String,Object&gt; props) {
        // Convert the properties to the DTO for type safe access
        NodeStatusDTO dto = CONVERTER.convert(props).to(NodeStatusDTO.class);

        // Check the ISO 3166-1 alpha 3 country code
        if ("DEU".equals(dto.country)) {
            // If this framework runs in Germany, install a special bundle into it
            try {
                fns.installBundle("... Germany specific bundle ...");
            } catch (Exception e) {
                // log
            }
        }
    }
}</programlisting></para>
  </section>

  <section>
    <title>Application-specific Node Status metadata</title>

    <para>The Node Status service provides a
    <code>osgi.clusterinfo.tags</code> property. Here, application specific
    tags can be assigned to the <code>NodeStatus</code> services. For example,
    one could assign different roles to the nodes such as "worker",
    "database", "storage", "gateway", etc. These roles are
    application-specific and should be defined by the application
    developer.</para>

    <para>Bundles can specify additional tags to be included in the
    <code>FrameworkNodeStatus</code> service representing the current
    framework by registering any service with the service property
    <code>org.osgi.service.clusterinfo.tags</code> providing a custom
    <code>String[]</code> of tags. The Cluster Information implementation will
    add those to the tags property of the <code>FrameworkNodeStatus</code>
    service that represents the OSGi framework. For example: <programlisting>// Register an arbitrary service that communicates the tags 
// to be added to the osgi.clusterinfo.tags service property.
Dictionary&lt;String, Object&gt; props = new Hashtable&lt;&gt;();
props.put("org.osgi.service.clusterinfo.tags", 
    new String [] {"database", "large_box"});
bundleContext.registerService(MyClass.class, this, props);</programlisting></para>
  </section>

  <section>
    <title>Security</title>

    <section>
      <title>Cluster Tag Permission</title>

      <para>The <code>ClusterTagPermission</code> class allows fine-grained
      control over which bundles may add which tags to the Framework Node
      Status service. A bundle can be granted to add a certain tag to the
      Framework Node Status, or be granted to add any tag using the *
      wildcard.</para>
    </section>

    <section>
      <title>Required Permissions</title>

      <para>The Cluster Information Specification should only be implemented
      by trusted bundles. These bundles require
      <code>ServicePermission[NodeStatus|FrameworkNodeStatus|FrameworkManager,
      REGISTER]</code>.</para>

      <para>All bundles accessing the Cluster Information services should get
      <code>ServicePermission[NodeStatus|FrameworkNodeStatus|FrameworkManager,
      GET]</code>.</para>

      <para>Only trusted bundles who must be able to add Node Status tags
      should be assigned <code>ClusterTagPermission[ClusterTag,
      ADD]</code>.</para>
    </section>

    <section>
      <title>Remote service visibility in a cluster</title>

      <para>By default, all remote OSGi services are visible within a cluster.
      This is handled by the <xref
      linkend="service.remoteserviceadmin"/>.</para>
    </section>
  </section>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.clusterinfo.xml"/>

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.clusterinfo.dto.xml"/>
</chapter>
