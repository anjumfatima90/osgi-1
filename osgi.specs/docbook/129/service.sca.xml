<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->

<chapter label="129"
         revision="$Id$"
         version="5.0" xml:id="service.sca"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>SCA Configuration Type Specification</title>

  <info>
    <releaseinfo xml:id="service.sca-version">Version 1.0</releaseinfo>
  </info>

  <section>
    <title>Introduction</title>

    <para>The <xref linkend="i3072184"/> provides an assembly model for
    distributed applications and systems using a service oriented
    architecture. The components that are assembled can be written in
    different technologies for example Java EE, BPEL, C++, and scripting
    languages. They can execute on different machines, and can communicate
    through different protocols and technologies. For example SOAP/HTTP as
    well as JMS and JCA. SCA enables the precise configuration of the
    communications between its components allowing the configuration to be
    deployed to different SCA runtimes without change. SCA enables
    interoperability when used with interoperable protocols, such as
    HTTP.</para>

    <para>The OSGi Remote Services model, which is based on the chapter about
    <xref linkend="service.remoteservices"/>, describes how to distribute OSGi
    services in general. The Remote Services specification provides an
    extendable model for configuration types, enabling the use of a wide array
    of technologies. This SCA Configuration Type Specification defines such a
    configuration type. It provides a mapping of the SCA distribution
    configuration to the OSGi Remote Services model, as well as the Remote
    Service Admin Endpoint Description, thus enabling OSGi runtimes to be
    configured for portability and interoperability.</para>

    <para>This specification is based on the <xref linkend="i3072278"/> and
    <xref linkend="i3072399"/>.</para>

    <section>
      <title>Essentials</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Portable</emphasis> - Allow an exported or imported
          service to be configured once for Distribution Providers from
          different origins.</para>
        </listitem>

        <listitem>
          <para><emphasis>Interoperable</emphasis> - Allow two Distribution
          Providers to be configured such that they can communicate with each
          other. This is achieved through the use of an interoperable
          Binding.</para>
        </listitem>

        <listitem>
          <para><emphasis>Extensible</emphasis> - Allow the configuration to
          be extended in new ways, for example, adding new <emphasis>Bindings
          Intents</emphasis> and <emphasis>Policy Sets.</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis>Compatible</emphasis> - Compatible with the SCA
          standards.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3089593">
      <title>Entities</title>

      <itemizedlist>
        <listitem>
          <para><emphasis>Distribution Provider</emphasis> - An implementation
          of the communications stack that distributes services according to
          the chapter about <xref linkend="service.remoteservices"/>.</para>
        </listitem>

        <listitem>
          <para><emphasis>SCA Distribution Provider</emphasis> - A
          Distribution Provider that supports the SCA configuration
          type.</para>
        </listitem>

        <listitem>
          <para><emphasis>Web Service</emphasis> - A communications stack to
          provide services available over HTTP, typically used to refer to a
          service using the <code>SOAP/HTTP</code> protocol.</para>
        </listitem>

        <listitem>
          <para><emphasis>Communications Stack</emphasis> - The software that
          enables the communication between different systems.</para>
        </listitem>

        <listitem>
          <para><emphasis>Binding Type</emphasis> - An XML schema type that
          defines the configuration details of an Endpoint. Different Binding
          Types are needed for different protocols and require different
          configuration details.</para>
        </listitem>

        <listitem>
          <para><emphasis>Binding</emphasis> - An XML element of a particular
          Binding Type detailing an actual Endpoint.</para>
        </listitem>

        <listitem>
          <para><emphasis>Intent</emphasis> - An abstract policy requirement
          on the interaction between a service provider and a service client.
          For example the <code>confidentiality</code> Intent could be
          implemented by encrypting the communications between the provider
          and the client.</para>
        </listitem>

        <listitem>
          <para><emphasis>Policy Set</emphasis> - An implementation of an
          Intent, optionally restricted to a specific Binding Type. A Policy
          Set is expressed in a language such as <xref linkend="i3073536"/>.
          For example, a Policy Set might configure Triple-DES encryption as
          the implementation for the <code>confidentiality</code> Intent when
          applied to the <code>sca:binding.ws</code> (web service) Binding
          Type.</para>
        </listitem>

        <listitem>
          <para><emphasis>SCA Configuration Bundle</emphasis> - A bundle
          containing Intents, Policy Sets, and Bindings in one or more of its
          resources.</para>
        </listitem>

        <listitem>
          <para><emphasis>SCA Configuration Extender</emphasis> - A bundle
          that can detect SCA configuration data in an SCA Configuration
          Bundle using the extender pattern.</para>
        </listitem>

        <listitem>
          <para><emphasis>SCA Configuration Document</emphasis> - An XML
          document containing SCA Configuration.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint</emphasis> - An Endpoint is a
          communications access mechanism to a service in another framework, a
          (web) service, another process, a queue or topic destination, etc.,
          requiring some protocol for communications.</para>
        </listitem>

        <listitem>
          <para><emphasis>Endpoint Description</emphasis> - A description of
          an Endpoint, defined in <xref
          linkend="service.remoteserviceadmin.endpointdescription"/>.</para>
        </listitem>
      </itemizedlist>

      <figure>
        <title>Class and Service overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.391in"
                       contentwidth="7.000in" fileref="sca-classes.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Synopsis</title>

      <para>Endpoints are created using metadata descriptions, the SCA
      Configuration, that are typed by the SCA specifications. This
      configuration defines the Bindings and policy information used to
      configure an exported Endpoint or describe the Endpoint to an importing
      framework. SCA Configurations can be installed into a framework through
      an <emphasis>SCA Configuration Bundle</emphasis>. An SCA Configuration
      Bundle is a bundle containing one or more SCA Configuration Documents.
      The Distribution Provider manages an internal registry based on these
      SCA Configurations. The internal registry is representing a view on the
      SCA domain; clusters of computers can potentially share this internal
      registry. However, the life cycle of the information in this registry is
      tied to the life cycle of the bundle that provides the SCA
      Configuration.</para>

      <para>A Distribution Provider is responsible for managing remote
      services; remote services can be exported and imported. For exporting a
      service, an Endpoint can be created when the following criteria are met
      on an active service:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Ready</emphasis> - A service is registered and
          satisfies the rules necessary for it to be considered available for
          exporting.</para>
        </listitem>

        <listitem>
          <para><emphasis>Configured</emphasis> - The configuration the
          service refers to in its properties, both directly and indirectly,
          is available, correct, and complete.</para>
        </listitem>
      </itemizedlist>

      <para>The satisfaction of these criteria can change over time, for
      example, due to new SCA Configuration Bundles becoming ready, being
      uninstalled, services being registered, services being unregistered, or
      having their configuration changed. The Distribution Provider is
      responsible for tracking all such changes and managing the Endpoint life
      cycle of an exported service accordingly.</para>

      <para>A Remote Service Admin service can also import Endpoints that are
      configured with the SCA Configuration Type. An SCA Distribution Provider
      must be able to import such a service.</para>
    </section>
  </section>

  <section>
    <title>SCA Overview</title>

    <para>The Service Component Architecture (SCA) is a programming model for
    assembling applications and systems using a <emphasis>service oriented
    architecture</emphasis>. The specifications for SCA are developed at <xref
    linkend="i3074222"/>. The core SCA specification is the <xref
    linkend="i3072278"/> that defines how components of different
    implementation technologies, such as Java EE, BPEL, and scripting
    languages, can be assembled and deployed.</para>

    <section>
      <title>Bindings and Binding Types</title>

      <para>To assist the deployment, the assembly contains XML descriptions
      of the required topology. An important aspect of this description is the
      <emphasis>Binding</emphasis>. A Binding provides the details of an
      Endpoint. Bindings can be attached to SCA services or SCA references
      (dependencies) of the assembled components in order to enable
      communications. For example, an RMI Binding would need the server and
      port number of an RMI Registry.</para>

      <para>Binding details vary significantly per protocol. This is the
      reason that the SCA model recognizes <emphasis>Binding Types</emphasis>.
      A Binding Type is defined as an XML Schema type in an XML namespace.
      Such a type must be substitutable for the <code>sca:binding</code>
      element. Vendors can also define Binding Types that are not specified by
      SCA. For example, a Binding Type for RMI authored by the ACME company
      could look like:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
   xmlns:sca="http://docs.oasis-open.org/ns/opencsa/sca/200912"
   xmlns:acme="http://acme.com/defs" &gt; 
   targetNamespace="http://acme.com/defs"&gt;  

   &lt;element name="binding.rmi" type="RMIBinding" 
      substitutionGroup="sca:binding"/&gt; 

   &lt;complexType name="RMIBinding"&gt; 
     &lt;complexContent&gt;
       &lt;extension base="sca:Binding"&gt; 
         &lt;attribute name="host" type="string" use="required"/&gt; 
         &lt;attribute name="port" type="string" use="optional"/&gt; 
       &lt;/extension&gt; 
     &lt;/complexContent&gt; 
   &lt;/complexType&gt; 
&lt;/schema&gt;</programlisting>

      <para>The details for a Binding are therefore configured in an element
      of a specific Binding Type. The Binding Type <code>sca:binding.ws</code>
      is quite common; this type defines the configuration for a web service.
      Therefore, an <code>sca:binding.ws</code> element details the
      particulars for a concrete web services Binding.</para>

      <para>A set of standard Binding Types are specified in SCA for web
      services, JMS, EJB, and JCA. All these bindings are optional for
      implementations of SCA. Any Binding Type must be supported by the
      run-time on which an assembly is deployed.</para>

      <para>Though Bindings provide the primary details of a Communication
      Stack, there are usually many options for a particular service to
      define. SCA specifies a <emphasis>Policy Framework</emphasis> that
      allows constraints, capabilities and quality requirements to be
      described for such a service.</para>
    </section>

    <section xml:id="i3074543">
      <title>Policy Framework</title>

      <para>The SCA policy framework is defined with
      <emphasis>Intents</emphasis> and <emphasis>Policy
      Sets</emphasis>.</para>

      <para>Intents give a name to abstract concepts such as
      <code>integrity</code> and <code>confidentiality</code>. The indirection
      of Intents allows the authors of services to specify their abstract
      communications requirements and not be concerned how these requirements
      are actually implemented. These Intents must then be satisfied by the
      deployer with a specific <emphasis>implementation</emphasis>. For
      example, a service author could have specified the
      <code>confidentiality</code> Intent which is then provided by the
      deployer by ensuring that the communications are encrypted with the
      <code>Blowfish</code> encryption algorithm, using a 442 bits key.</para>

      <para>Intents can be suffixed with a full stop (<code>'.' \u002E</code>)
      and a <emphasis>qualifier</emphasis> to create a <emphasis>qualified
      Intent</emphasis>. For example, <code>integrity.message</code> qualifies
      the <code>integrity</code> Intent.</para>

      <para>Qualifiers have only one level and there must always be one
      qualifier that is the <emphasis>default qualifier</emphasis>. A service
      author that requires an Intent can be satisfied by a Distribution
      Provider that provides that Intent or any of its qualified forms. That
      is, requiring the <code>SOAP</code> Intent on an exported service is
      satisfied by the <code>SOAP.v1_2</code> qualified Intent of a
      Distribution Provider. Providing a qualified Intent implies all the
      semantics of its unqualified Intent. Requiring a qualified Intent can
      only be satisfied with that specific qualified Intent. Each Intent can
      mark one qualified Intent as its default, if only one qualified Intent
      is specified then this is the default. The default qualified Intent is
      used to resolve a choice when no other information is available. For
      example, the <code>SOAP</code> intent could mark the <code>v1_2</code>
      qualifier as default. In such a case, a Distribution Provider must use
      the <code>SOAP.v1_2</code> qualified Intent, even though an exported
      service only required the SOAP Intent.</para>

      <para>Intents can also be grouped in <emphasis>profile
      Intent</emphasis>s.</para>

      <para>A Binding Type can state Intents that it inherently provides. For
      example, a web service Binding inherently provides the <code>SOAP</code>
      Intent. An instance of a Binding Type, a <emphasis>Binding</emphasis>,
      can configure requirements for additional Intents. This allows the
      Binding to configure-in additional aspects of the communications that
      were not inherently provided by the Binding Type, or the Intents
      required by the service. For example, a Binding could add the
      <code>confidentiality</code> Intent.</para>

      <para>The <emphasis>implementation</emphasis> of an Intent is provided
      by a <emphasis>Policy Set</emphasis>. A Policy Set uses a policy
      language to define this implementation. A Policy Set can apply to all
      Binding Types or it can apply to a specific Binding Type. For example,
      an SCA service could be configured with the SCA web services Binding
      (<code>binding. ws</code> element) and the <code>confidentiality</code>
      Intent. A Policy Set that matches the tuple <code>(confidentiality,
      binding.ws)</code> then defines that the implementation is the
      <code>Triple-DES</code> encryption algorithm.</para>

      <para>SCA provides a mechanism to define Policy Sets
      using standard policy languages, such as the <xref
      linkend="i3073536"/>.</para>

      <para>In order for a service to be correctly configured, the
      relationships between Intents, Bindings and Policy Sets must be
      consistent. For example, a Policy Set could state that it provides the
      <code>confidentiality</code> Intent and applies to the
      <code>binding.ws</code> Binding. However, if the Intent does not also
      state it applies to the web service Binding then the relationships do
      not match and the configuration is invalid or incomplete.</para>
    </section>

    <section>
      <title>Relationships</title>

      <para>Intents and Policy Sets are configured in the <code>intent</code>
      and <code>policySet</code> elements as well as the elements and
      attributes defined by the Binding Types. <xref linkend="i3089579"/>
      shows these elements and XML Schema Type from the SCA Policy Framework
      that are applicable to this specification. The relationships between
      these elements and types are described in <xref
      linkend="service.sca-policy.framework.relationships"/>. The
      relationships in <xref linkend="i3089579"/> and <xref
      linkend="service.sca-policy.framework.relationships"/> are named after
      their corresponding element or attribute in the SCA Schema.</para>

      <figure xml:id="i3089579">
        <title>Policy Framework Model</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.631in"
                       contentwidth="6.272in"
                       fileref="policy-framework-model.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>An overview of the policy framework elements and relationships is
      given below, and an example provided in the sections that describe each
      of the entities. See <xref linkend="i3118700"/>, <xref
      linkend="i3101163"/>, and <xref linkend="i3093631"/>.</para>

      <table xml:id="service.sca-policy.framework.relationships">
        <title>Policy Framework Relationships</title>

        <tgroup cols="4">
          <colspec colnum="1" colwidth="1*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="1*"/>

          <colspec colnum="4" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>From</entry>

              <entry>Relationship</entry>

              <entry>To</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>Binding Type</code></entry>

              <entry><code>provides</code></entry>

              <entry><code>Intent</code></entry>

              <entry><para>Binding Types can provide (either always, or
              optionally) Intents. Such Intents do not require additional
              Policy Set configuration. For example, the web service Binding
              always provides the <code>SOAP</code> Intent and can optionally
              provide the <code>SOAP.v1_1</code> or <code>SOAP.v1_2</code>
              Intents.</para></entry>
            </row>

            <row>
              <entry morerows="1"><code>Binding</code></entry>

              <entry><code>requires</code></entry>

              <entry><code>Intent</code></entry>

              <entry><para>A Binding can be configured to require additional
              Intents that were not expressed on the services that refer to
              it.</para></entry>
            </row>

            <row>
              <entry><code>policySets</code></entry>

              <entry><code>Policy Set</code></entry>

              <entry><para>A Binding can refer directly to Policy Sets,
              short-cutting the need to define an Intent.</para></entry>
            </row>

            <row>
              <entry morerows="3"><code>Intent</code></entry>

              <entry><code>constrains</code></entry>

              <entry><code>Binding Type</code></entry>

              <entry><para>An Intent can constrain a Binding Type. This makes
              the Intent only applicable for Bindings of the given
              type.</para></entry>
            </row>

            <row>
              <entry><code>requires</code></entry>

              <entry><code>Intent</code></entry>

              <entry><para>An Intent can require another Intent. This
              mechanism enables the creation of <emphasis>profile
              Intents</emphasis>. A profile Intent is an Intent defined in
              terms of other Intents. For example, a
              <code>communicationProtection</code> Intent could be defined as
              the combination of the <code>confidentiality</code> and
              <code>integrity</code> Intents.</para></entry>
            </row>

            <row>
              <entry><code>qualifies</code></entry>

              <entry><code>Intent</code></entry>

              <entry><para>A qualified Intent is an Intent that provides
              further qualification of another Intent. For example the Intent
              <code>SOAP.v1_2</code> qualifies <code>SOAP</code> further by
              constraining it to a specific version of the SOAP
              protocol.</para></entry>
            </row>

            <row>
              <entry><code>excludes</code></entry>

              <entry><code>Intent</code></entry>

              <entry><para>An Intent can exclude another Intent. Exclusion of
              an Intent states that the two cannot be used together; such
              Intents are mutually exclusive.</para></entry>
            </row>

            <row>
              <entry morerows="1"><code>Policy Set</code></entry>

              <entry><code>provides</code></entry>

              <entry><code>Intent</code></entry>

              <entry><para>A Policy Set can provide concrete configuration for
              Intents. For example, a Policy Set could define a specific
              encryption algorithm to use for the <code>confidentiality</code>
              Intent.</para></entry>
            </row>

            <row>
              <entry><code>appliesTo</code></entry>

              <entry><code>Binding Type</code></entry>

              <entry><para>A Policy Set can apply to a Binding Type or all
              types of Binding. Applying to a Binding Type means it is valid
              to configure the Policy Set on Bindings of that Binding Type.
              Configuration can either be done indirectly through the use of
              an Intent that the Policy Set provides, or directly by referring
              to the Policy Set by name in the Binding
              configuration.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section xml:id="i3110292">
    <title>SCA Configuration Bundles</title>

    <para>An OSGi Distribution Provider that supports SCA configuration types
    must track <emphasis>SCA Configuration Bundles</emphasis>. These are
    bundles that are marked to have <emphasis>SCA Configuration
    Documents</emphasis>, this detection is explained in <xref
    linkend="i3102952"/>. If such an SCA Configuration Bundle is found, then
    its resources are parsed as SCA Configuration Documents and, when found to
    be correct, their configuration placed in an <emphasis>internal
    registry</emphasis>. This internal registry contains the defined Bindings,
    Intents, and Policy Sets indexed by their names. The Intents, Policy Sets,
    and Bindings are then available for bundles that want to export or import
    services. If the SCA Configuration Bundle is stopped, the internal
    registry must be purged from any of the information that was derived from
    the bundle's resources.</para>

    <para>For example, if an SCA Configuration Bundle defines the
    <code>acme:FooRMI</code> Binding together with the
    <code>acme:protected</code> Intent, then the following service properties
    could be used to export a service:</para>

    <programlisting>service.exported.configs = org.osgi.sca
org.osgi.sca.bindings    = FooRMI
service.exported.intents = protected</programlisting>

    <section xml:id="i3112147">
      <title>Naming</title>

      <para>Service properties can export a service with a qualified name or
      the short name for Bindings and Intents. These names have the following
      structure:</para>

      <programlisting>name ::= NCName | QName</programlisting>

      <para>Both <code>QName</code> and <code>NCName</code> are defined by
      <xref linkend="i3102308"/>. The structure for a <code>QName</code>
      is:</para>

      <programlisting>QName ::= '{' &lt;namespace&gt; '}' NCName</programlisting>

      <para>Spaces are not allowed in a <code>name</code>.</para>

      <para>For example, a new Intent named <code>protected</code>, defined in
      an SCA Configuration Resource and a <code>targetNamespace</code> of
      <code>http://acme.com</code>, would be identifiable through the
      qualified name:</para>

      <programlisting>{http://acme.com}protected</programlisting>

      <para>There is no specific support for versioning. A name defined in a
      namespace must be treated as identical if it appears in multiple
      documents. Namespaces can implement versioning by suffixing the
      namespace with a version number.</para>
    </section>

    <section xml:id="i3113675">
      <title>Internal Registry</title>

      <para>The Distribution Provider must maintain an internal registry that
      contains the following types:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Intent Vocabulary</emphasis> - The vocabulary of the
          Intents. These Intents must become available on the Distribution
          Provider's <code>remote.intents.supported</code> service property
          once they are available in the internal registry and have an
          appropriate implementation.</para>
        </listitem>

        <listitem>
          <para><emphasis>Policy Set Dictionary</emphasis> - A dictionary of
          Policy Sets. These Policy Sets define the implementations of the
          Intents.</para>
        </listitem>

        <listitem>
          <para><emphasis>Binding Dictionary</emphasis> -Maps the defined
          Bindings. These Bindings must be of Binding Types that are supported
          by the Distribution Provider. Adding new Binding Types is out of
          scope for this specification.</para>
        </listitem>
      </itemizedlist>

      <para>The internal registry must maintain the items by their qualified
      name but it must be possible to find entries with short names. There is
      no requirement that the internal registry is internally consistent nor
      <emphasis>complete</emphasis> (see <xref linkend="i3106449"/> ) at all
      times. Duplicate qualified names for the same type are, however, never
      allowed. It is legal to refer to names that have not been defined,
      however, such referrers cannot be used in configuration types until they
      are complete.</para>

      <para>The Internal SCA Registry should, at any moment in time, only
      contain the error-free definitions of ready SCA Configuration Bundles.
      Due to the asynchronous nature of processing the definitions, it is
      likely that some time lag will happen, users of this specification must
      take this lag into account.</para>
    </section>

    <section xml:id="i3102952">
      <title>Detection of SCA Configuration Bundles</title>

      <para>A bundle is an <emphasis>SCA Configuration Bundle</emphasis> if
      its manifest contains an SCA-Configuration header and it has one or more
      SCA Configuration Documents. The structure of an SCA Configuration
      Document is defined in <xref linkend="i3101906"/>. A Distribution
      Provider is responsible for obtaining and releasing configurations based
      on the bundle life cycle of SCA Configuration Bundles.</para>

      <para>The SCA-Configuration header has the following syntax:</para>

      <programlisting>SCA-Configuration ::= header     // See Common Header Syntax in Core</programlisting>

      <para>If the header is present, but no value is provided, then its
      default value is:</para>

      <programlisting>OSGI-INF/sca-config/*.xml</programlisting>

      <para>This specification does not define any attributes or directives
      for this header, implementations of this specification must ignore
      unrecognized attributes and directives. Implementations can provide
      proprietary parameters that should be registered with the OSGi Working Group
      to prevent name collisions. The non-localized version of the
      SCA-Configuration header must be used.</para>

      <para>The last component of each path in the SCA-Configuration clauses
      may use wildcards so that the <code>Bundle</code>
      <code>findEntries</code> method can be used to locate the SCA
      Configuration resource within the bundle and its fragments. The
      <code>findEndtries</code> method must always be used in the
      non-recursive mode. Valid paths in the header have one of the following
      forms:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>Absolute path</emphasis> - The path to a resource in
          the fragment or directory, this resource must exist. For example
          <code>cnf/start.xml</code>.</para>
        </listitem>

        <listitem>
          <para><emphasis>Directory</emphasis> - The path to directory in a
          fragment or the bundle's JAR; the path must end in a solidus
          (<code>'/' \u002F</code>). The pattern used in the
          <code>findEntries</code> method must then be <code>*.xml</code>. The
          directory is allowed to be empty.</para>
        </listitem>

        <listitem>
          <para><emphasis>Pattern</emphasis> - The last component of the path
          specifies a resource name with optional wildcards. The part before
          is the path of a directory in the bundle or one of its fragments.
          These two parts specify the parameter to the
          <code>findEntries</code> method. It is allowed to have no matching
          resources. An example of a pattern is:
          <code>cnf/*.xml</code>.</para>
        </listitem>
      </itemizedlist>

      <para>If the SCA-Configuration header is not present, then the bundle
      must not be searched for SCA Configuration Documents. An
      SCA-Configuration manifest header specified in a fragment must be
      ignored by the Distribution Provider.</para>

      <para>If no SCA Configuration Documents can be found, then the SCA
      Configuration Bundle is ignored for the purpose of SCA Configuration
      data. SCA Configuration Documents referenced by an SCA-Configuration
      manifest header, or its default, may be contained in attached fragments;
      this is the normal mode for the <code>findEntries</code> method.</para>

      <para>For example, the following header will read the resources
      <code>/bindings/acme.xml</code>, <code>policy/security.xml</code>, and
      all resources whose path ends in <code>.xml</code> in the
      <code>/other</code> bundle directory:</para>

      <programlisting>SCA-Configuration: bindings/acme.xml, policy/security.xml,other/*.xml</programlisting>
    </section>

    <section>
      <title>Parsing</title>

      <para>The Distribution Provider must parse the specified SCA
      Configuration Documents and place the found definitions in the internal
      registry. Parsing fails if:</para>

      <itemizedlist>
        <listitem>
          <para>The XML is not well formed.</para>
        </listitem>

        <listitem>
          <para>An SCA Configuration Document does not validate against its
          schema.</para>
        </listitem>

        <listitem>
          <para>The contained elements do not meet one or more of their
          constraints as defined in this specification.</para>
        </listitem>

        <listitem>
          <para>Any error occurs.</para>
        </listitem>
      </itemizedlist>

      <para>A <emphasis>failure</emphasis> invalidates all SCA configuration
      for the entire SCA Configuration Bundle. Failures should be logged if a
      Log Service is present. The Distribution Provider must cease processing
      of the SCA Configuration Bundle and discard any configuration
      information it has already processed. That is, either all information
      from an SCA Configuration Bundle is in the internal registry or
      none.</para>
    </section>

    <section>
      <title>Activation of New SCA Configuration</title>

      <para>When a new SCA Configuration Bundle is detected, a Distribution
      Provider must:</para>

      <orderedlist>
        <listitem>
          <para>Wait until the configuration bundle is
          <emphasis>ready</emphasis>. A configuration bundle is ready when it
          is in the <code>ACTIVE</code> state. In the case where the
          configuration bundle has a <code>lazy</code> activation policy,
          ready must also include the <code>STARTING</code> state.</para>
        </listitem>

        <listitem>
          <para>Verify that the bundle is an SCA Configuration Bundle, see
          <xref linkend="i3102952"/>.</para>
        </listitem>

        <listitem>
          <para>Parse the SCA Configuration Documents as defined in <xref
          linkend="i3101906"/>.</para>
        </listitem>

        <listitem>
          <para>Validate the new Intent, Policy Set and Binding definitions
          against the current internal registry. Multiple Intent definitions
          with the same qualified name are not permitted, just as Bindings and
          Policy Sets must have unique qualified names within the internal SCA
          registry. Duplications (same qualified name) are treated as a
          failure.</para>
        </listitem>

        <listitem>
          <para>Process any additional Distribution Provider specific
          configuration. If the Distribution Provider encounters any
          configuration that it does not understand and the
          <code>must-understand</code> attribute is set to <code>true</code>,
          then this is a failure. The <code>must-understand</code> attribute
          is an OSGi specific extension.</para>
        </listitem>

        <listitem>
          <para>Add new Intents to the Distribution Providers's vocabulary.
          See <xref linkend="i3093631"/> for the rules on when Intents should
          be added to the Distribution Provider's vocabulary.</para>
        </listitem>

        <listitem>
          <para>Add new Policy Sets to the internal SCA registry Policy Set
          dictionary.</para>
        </listitem>

        <listitem>
          <para>Add any new Bindings to the internal SCA registry Binding
          dictionary.</para>
        </listitem>

        <listitem>
          <para>Perform any service export or import changes resulting from
          the updates to the Distribution Provider's internal registry. This
          can result in new Endpoints being created, existing Endpoints being
          modified, or new proxies to remote services being registered. See
          <xref linkend="i3092979"/> and <xref linkend="i3107236"/>.</para>
        </listitem>
      </orderedlist>

      <para>The previous steps can happen in parallel for different
      bundles.</para>
    </section>

    <section>
      <title>Deactivation of an SCA Configuration</title>

      <para>When an SCA Configuration Bundle is stopped then the Distribution
      Provider must:</para>

      <orderedlist>
        <listitem>
          <para>Remove the bundle's Intents, Policy Sets and Bindings from the
          internal registry.</para>
        </listitem>

        <listitem>
          <para>Remove any additional configuration that the bundle
          contributed.</para>
        </listitem>

        <listitem>
          <para>Update the <code>remote.supported.configs</code> service
          property with the currently complete Intents.</para>
        </listitem>

        <listitem>
          <para>Remove any Endpoints for exported services that are now no
          longer fully configured. See <xref linkend="i3092979"/>, for the
          steps used to determine when an Endpoint is fully configured for an
          exported service.</para>
        </listitem>

        <listitem>
          <para>Remove any proxies for imported services that were configured
          information from the SCA Configuration Bundle.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Example SCA Configuration</title>

      <para>The following example shows an extract of an SCA Configuration
      that contributes a number of Bindings. The first Binding describes a web
      service Endpoint of the type <code>binding.ws</code> and the next
      Binding configuration describes the vendor specific <code>acme</code>
      configuration for an RMI Endpoint. Such a vendor specific Binding Type
      can only be used when the Distribution Provider has built-in supports
      for this hypothetical type.</para>

      <programlisting>&lt;sca:binding.ws 
    name       ="FooWS"
    uri        ="http://acme.com/Foo" requires="sca:SOAP.v1_2" 
/&gt;
&lt;acme:binding.rmi 
    name       ="FooRMI"
    host       ="acme.com" 
    port       ="8099" 
    serviceName="Foo"
/&gt;</programlisting>

      <para>The service property values used to reference both Bindings from
      the previous example SCA configuration look as follows:</para>

      <programlisting>service.exported.configs = org.osgi.sca
org.osgi.sca.bindings    = [FooWS,{http://acme.com/defs}FooRMI]</programlisting>

      <para>The relationships of this example between these Binding Types,
      Bindings, service and Endpoints are illustrated in <xref
      linkend="i3104727"/>.</para>

      <figure xml:id="i3104727">
        <title>Example SCA Configuration Schema</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.900in"
                       contentwidth="6.272in"
                       fileref="configuration-schema-example.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>A Distribution Provider that supports one or more Binding Types
      like <code>sca:binding.ws</code> or <code>acme:binding.rmi</code> must
      uses the rules described in <xref linkend="i3092979"/> to decide whether
      or not to create an Endpoint for any services that reference the
      Bindings. A Binding can be referred to either through its
      <code>NCName</code> or <code>QName</code>, see <xref
      linkend="i3112147"/>. In the previous example, The <code>FooWS</code>
      Binding value is using a short <code>NCName</code>, the
      <code>{http://acme.com/defs}FooRMI</code> Binding uses the longer
      <code>QName</code>. The <code>QName</code> form is more verbose but
      reduces the risk of name clashes. A Distribution Provider must support
      matching both forms.</para>

      <para>If an <code>NCName</code> can be matched against multiple bindings
      then this is considered an error. Such an error should be logged if a
      Log Service is available. This error does not affect the use of other
      bindings listed in the <code>org.osgi.sca.bindings</code>
      property.</para>
    </section>
  </section>

  <section xml:id="i3101906">
    <title>SCA Configuration Document</title>

    <para>An SCA Configuration Document defines the Bindings, Policy Sets and
    Intents for exporting and importing OSGi services. It is an XML document
    that is typed by the schema defined in <xref linkend="i3091466"/>.</para>

    <section xml:id="i3113000">
      <title>XML</title>

      <para>In the following sections, the XML is explained using the normal
      regular expression based syntax notation used for headers. There is,
      however, one addition to the normal usage specific to XML, and that is
      the use of the angled brackets <code>( &lt;&gt;)</code>. A term enclosed
      in angled brackets, indicates the use of an actual element, similar to a
      literal. Without the angled brackets it is the definition of a term that
      is expanded later to a one or more other terms or elements. For
      example:</para>

      <programlisting>people     ::= &lt;person&gt; *
person     ::= &lt;child&gt;* address
address    ::= &lt;fr&gt; | &lt;us&gt; | &lt;nl&gt;</programlisting>

      <para>This example uses <code>&lt;person&gt;</code> as a literal for the
      <code>person</code> element and <code>address</code> as a term that is
      defined later. The following XML is an instance of the previous example
      definition:</para>

      <programlisting>&lt;people&gt;
    &lt;person id="mieke"&gt;
        &lt;child name="mischa"/&gt;
        &lt;child name="thomas"/&gt;
        &lt;fr zip="34160"/&gt;
    &lt;/person&gt;
&lt;/people&gt;</programlisting>

      <para>Attributes are described in tables or in text. The following
      sections are a normative description of the semantics of the schema.
      However, the structure information is illustrative. The actual XML
      Schema is defined in <xref linkend="i3091466"/>.</para>

      <para>The reason many attributes that refer to other elements are typed
      with <code>xsd:string</code> and not <code>QName</code> or
      <code>NCName</code> is done to align the schema with its source, the SCA
      Schema. In SCA, these attributes can contain XPath expressions and must
      therefore be strings. This specifications only supports
      <code>QName</code> and <code>NCName</code> though.</para>

      <para>A number of attributes contain <emphasis>XPath
      expressions</emphasis>. The expressions are ran against a virtual XML
      tree that has an top element with an undefined name and contains all the
      binding elements of the internal registry. For example, the XPath
      expression <code>//sca:binding.ws</code> is guaranteed to select all web
      service bindings in the internal registry.</para>

      <para>The <code>@</code> sign is used to indicate an XML attribute. An
      XML type for an attribute can be suffixed with a plus sign (<code>'+'
      \u002B</code>). This indicates a list of whitespace separated
      elements.</para>
    </section>

    <section xml:id="i3118700">
      <title>sca-config Element</title>

      <para>An SCA Configuration Document root element is the
      <code>sca-config</code> element. The schema structure is depicted in
      <xref linkend="i3091802"/> ; it is summarized as follows:</para>

      <programlisting>sca-config ::= ( &lt;intent&gt; | &lt;policySet&gt;| &lt;&lt;binding&gt;&gt; )*</programlisting>

      <para>The <code>intent</code>, and <code>policySet</code> elements (and
      their child nodes) are defined in the SCA specification. However, the
      actual Binding Instances are defined in elements from the SCA or other
      namespaces. This distinction is indicated by using it as an element with
      double angled brackets: <code>&lt;&lt;binding&gt;&gt;</code>. The actual
      Binding Type XML schema must be supported by the Distribution
      Provider.</para>

      <figure xml:id="i3091802">
        <title>SCA Configuration Schema</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.521in"
                       contentwidth="6.272in"
                       fileref="configuration-schema.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i3113016">
      <title>Default Example Definitions</title>

      <para>In the following sections, the <code>sca-config</code> element and
      its namespace definitions are omitted for brevity. However, the use of
      the prefixes is consistent. Further, it is assumed that the target
      namespace of the example is the ACME company's namespace. All examples
      therefore are assumed to be contained in the following XML
      fragment:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;scact:sca-config
    targetNamespace="http://acme.com/defs"
    xmlns:scact    ="http://www.osgi.org/xmlns/scact/v1.0.0" 
    xmlns:sca      ="http://docs.oasis-open.org/ns/opencsa/sca/200912"
    xmlns:acme     ="http://acme.com/defs"&gt;
  &lt;!-- example goes here --&gt;
&lt;/scact:sca-config&gt;</programlisting>

      <para>There are many types used in this specification that are defined
      in the XML Schema specification. These types are prefixes with the
      <code>xsd</code> prefix which stands for:</para>

      <programlisting>http://www.w3.org/2001/XMLSchema</programlisting>
    </section>

    <section xml:id="i3093631">
      <title>intent Element</title>

      <para>The <code>intent</code> element defines an Intent. Its structure
      is:</para>

      <programlisting>intent ::= &lt;qualifier&gt; *</programlisting>

      <para>Intents contributed in an <code>intent</code> element must become
      part of the Distribution Provider's Intent vocabulary once they are
      complete, see <xref linkend="i3106449"/>. This includes the Intent name
      itself as well as all its defined qualified variations. These Intent
      names must include the <code>NCName</code> form, allowing the occurrence
      of duplicates.</para>

      <para>The Distribution Provider is responsible for ensuring its Intent
      vocabulary reflects the Intents it is configured to support. For
      example, if an SCA Configuration Bundle with a Policy Set that provides
      the <code>confidentiality</code> Intent is uninstalled, and there are no
      other implementations of that Intent available, then it must be removed
      from the Distribution Provider's Intent vocabulary. Intents can apply to
      specific binding types only. It is therefore possible that an Intent is
      part of a Distribution Provider's vocabulary but is not available for a
      specific Binding Instance.</para>

      <para>The details of how Intents are defined is described in the <xref
      linkend="i3072399"/>. This OSGi Specification only uses the
      <code>constrains</code> attribute for all, or specific Binding Types,
      such as the Binding Type <code>sca:binding.ws</code>. A Distribution
      Provider can choose to support other <code>constrains</code> attribute
      values. If a Distribution Provider encounters a value it does not
      understand then it must not use any of the information defined in the
      offending SCA Configuration Bundle.</para>

      <para>An <code>intent</code> element can have a number of
      <emphasis>qualifiers</emphasis>. This allows the specification of
      qualified Intents The <code>qualifier</code> element is explained in
      <xref linkend="i3094487"/>. The <code>intent</code> element structure is
      illustrated in <xref linkend="i3093935"/>.</para>

      <figure xml:id="i3093935">
        <title>intent Element</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="2.040in"
                       contentwidth="6.200in" fileref="intent-element.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The attributes and sub-elements of the <code>intent</code> element
      are described in the following table.</para>

      <table>
        <title>Intent Attributes</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><para><code>NCName</code></para></entry>

              <entry><para>The name of the Intent being
              defined.</para></entry>
            </row>

            <row>
              <entry><code>constrains</code></entry>

              <entry><para><code>QName+</code></para><para>(optional)</para></entry>

              <entry><para>In SCA, <code>intent</code> elements can apply to
              many specific SCA artifacts. In this specification an
              <code>intent</code> element can either constrain a specific
              Binding Type, for example <code>acme:binding.rmi</code>, or all
              Binding Types: <code>sca:binding</code>. The
              <code>sca:binding</code> type is the substitution type of all
              Binding Type. This attribute must be used with a whitespace
              separated list.</para><para>If the <code>constrains</code>
              attribute is omitted then it is assumed that the use of the
              <code>intent</code> element is unrestricted.</para></entry>
            </row>

            <row>
              <entry><code>requires</code></entry>

              <entry><para><code>QName+</code></para><para>(optional)</para></entry>

              <entry><para>An <code>intent</code> element can require other
              <code>intent</code> elements. The <code>requires</code>
              attribute enables the creation of profile Intents. This
              attribute must be used with a whitespace separated
              list.</para></entry>
            </row>

            <row>
              <entry><code>excludes</code></entry>

              <entry><para><code>QName+</code></para><para>(optional)</para></entry>

              <entry><para>A list of Intents that are incompatible with this
              Intent. It is an error to register a service with incompatible
              Intents; a Distribution Provider must not distribute such a
              service. This attribute must be used with a whitespace separated
              list.</para></entry>
            </row>

            <row>
              <entry><code>mutuallyExclusive</code></entry>

              <entry><para><code>xsd:boolean</code></para><para>(optional)</para></entry>

              <entry><para><code>true</code> signifies that the qualified
              Intents defined in children elements are mutually exclusive and
              must not be used together. If <code>false</code> or not set then
              any of the defined qualified Intents can be used
              together.</para></entry>
            </row>

            <row>
              <entry><code>intentType</code></entry>

              <entry><para><code>&#160;&#160;sca:Interaction</code></para><para><code>|
              sca:Implementation</code></para><para>(optional)</para></entry>

              <entry><para>SCA allows Intents to configure the Distribution
              Providers as well as any <emphasis>interaction
              policies</emphasis>. OSGi only uses interaction Intents (the
              default) and therefore this element can be omitted. A
              Distribution Provider that does not recognize Implementation
              Intents must fail if such an Implement Intent is specified.
              Implementation Intents must not become part of the Distribution
              Provider's vocabulary.</para></entry>
            </row>

            <row>
              <entry><code>description</code></entry>

              <entry><para><code>xsd:string</code></para><para>(optional)</para></entry>

              <entry><para>A human readable text description of the
              Intent.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The following example shows how a Distribution Provider is
      configured with a new Intent called <code>acme:protection</code>. This
      new Intent definition states that it constrains the
      <code>sca:binding.ws</code> Binding Type. The <code>protection</code>
      Intent is in the <code>acme</code> namespace because of the
      <code>targetNamespace</code> attribute set for all examples, see <xref
      linkend="i3113016"/>. The XML for this example XML fragment looks
      like:</para>

      <programlisting>&lt;sca:intent
    name       ="protection" 
    constrains ="sca:binding.ws"
/&gt;</programlisting>

      <para>This example could also have stated it applied to all Bindings by
      omitting the <code>constrains</code> attribute or specifying
      <code>sca:binding</code> in the <code>constrains</code> attribute. <xref
      linkend="i3096496"/> shows an illustration of the
      <code>acme:protection</code> Intent's relationship with
      <code>sca:binding.ws</code>.</para>

      <figure xml:id="i3096496">
        <title>The acme.protection Intent</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="0.543in"
                       contentwidth="5.999in"
                       fileref="acme-protection-intent.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i3094487">
      <title>qualifier Element</title>

      <para>The <code>qualifier</code> element allows an <code>intent</code>
      element to have qualifiers. An <code>intent</code> element can contain
      any number of <code>qualifier</code> elements, each
      <code>qualifier</code> element specifies a suffix for the parent Intent.
      These qualifiers are used to make an Intent more specific. For example,
      the qualified Intent <code>confidentiality.message</code> would be have
      an <code>intent@name</code> of <code>confidentiality</code> and a
      qualifier with the name set to <code>message</code>. One, and only one,
      of the qualifier elements must be set to be the default qualifier. If
      only one qualifier element is defined then this is the default by
      definition.</para>

      <para>The following table describes the <code>qualifier</code> element.
      See <xref linkend="service.remoteservices"/> for the definition of
      qualified Intents.</para>

      <table>
        <title>qualifier Element</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para>The name of the qualifier. For example,
              <code>transport</code> for the qualified Intent
              <code>confidentiality.transport</code>.</para></entry>
            </row>

            <row>
              <entry><code>default</code></entry>

              <entry><para><code>xsd:boolean</code></para><para>(optional)</para></entry>

              <entry><para><code>true</code> if this qualifier is the default,
              <code>false</code> if not. The default for the
              <code>default</code> attribute is <code>false</code>. One
              qualifer element must set the <code>default</code> attribute to
              <code>true</code>. If there is only one qualifier than it is by
              default the default and does not have to be explicitly set. In
              this case, if it is explicitly set to <code>false</code> then
              this is invalid.</para></entry>
            </row>

            <row>
              <entry><code>description</code></entry>

              <entry><para><code>xsd:string</code></para><para>(optional)</para></entry>

              <entry><para>A human readable text description of the qualified
              Intent.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3101163">
      <title>policySet Element</title>

      <para>A <code>policySet</code> element defines how Intents are
      implemented. The structure of the <code>policySet</code> element
      is:</para>

      <programlisting>policySet ::= (&lt;policySetReference&gt;| &lt;intentMap&gt; | policy )* 
policy    ::= &lt;&lt; policy defined in some policy language&gt;&gt;</programlisting>

      <para>The Policy Sets provide a place to insert policy using various
      policy languages. They allow multiple entries, but the ways in which
      those are combined are defined by the policy language being used. For
      example, WS-Policy allows these to be additive or alternatives.</para>

      <para>A <code>policySetReference</code> element contains a reference to
      another <code>policySet</code> element, see <xref linkend="i3098900"/>.
      A <code>policySetReference</code> element enables <code>policySet</code>
      elements to be defined in terms of other <code>policySet</code>
      elements.</para>

      <para>An <code>intentMap</code> sub-element is used to define the
      implementation for a qualified Intent. See <xref linkend="i3072399"/>
      for more details. See also <xref linkend="i3101537"/>.</para>

      <para xml:id="i3100424"><xref linkend="i3107017"/> illustrates the
      schema for <code>policySet</code> elements.</para>

      <figure xml:id="i3107017">
        <title>policySet element</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="3.615in"
                       contentwidth="6.272in" fileref="policyset-element.svg"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The attributes of the <code>policySet</code> element are described
      in the following table.</para>

      <table>
        <title>policySet Element</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>NCName</code></entry>

              <entry><para>The name of the Policy Set. This name can be used
              to refer to the Policy Set from a Binding. The name must be
              combined with the <code>targetNamespace</code> of the
              <code>sca-config</code> element to give the <code>QName</code>
              for the Policy Set.</para></entry>
            </row>

            <row>
              <entry><code>provides</code></entry>

              <entry><para><code>QName+</code></para><para>(optional)</para></entry>

              <entry><para>A list of <code>QName</code> values (whitespace
              separated) declaring the Intents the Policy Set provides
              (implements).</para></entry>
            </row>

            <row>
              <entry><code>appliesTo</code></entry>

              <entry><code>xsd:string</code></entry>

              <entry><para>Identifies what Bindings the Policy Set applies to.
              Can be either a specific Binding (e.g.
              <code>acme:binding.rmi</code>) or all Binding Types
              (<code>sca:binding</code>). This attribute is an XPath
              expression in SCA.</para></entry>
            </row>

            <row>
              <entry><code>attachTo</code></entry>

              <entry><para><code>xsd:string</code></para><para>(optional)</para></entry>

              <entry><para>Not used. If a value is specified and a
              Distribution Provider does not understand <code>attachTo</code>
              then it must not use the SCA Configuration
              Bundle.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The following example shows the contribution of a Policy Set. In
      this example, the <code>policySet</code> element describes the
      particular encryption options to be used to implement the
      <code>acme:protection</code> Intent on the web service binding
      <code>binding.ws</code>. Each time a service with this Intent is
      exported to an Endpoint using <code>binding.ws</code>, then this is the
      encryption policy the Distribution Provider must use.</para>

      <programlisting>service.exported.configs = org.osgi.sca
org.osgi.sca.bindings    = FooWS
service.intents          = {http://acme.com/defs}protection</programlisting>

      <para>The <code>policySet</code> element is defined using <xref
      linkend="i3073536"/>. The Policy Set is named
      <code>acme:Encrypted</code>; it provides the
      <code>acme:protection</code> Intent, and applies it to the
      <code>sca:binding.ws</code> Binding Type only.</para>

      <programlisting>&lt;sca:binding.ws name="FooWS" ... /&gt;
&lt;sca:intent
    name       ="protection" 
    constrains ="sca:binding.ws"
/&gt;
&lt;sca:policySet 
    name       ="Encrypted" 
    provides   ="acme:protection"
    appliesTo  ="sca:binding.ws"
    xmlns:wsp  ="http://schemas.xmlsoap.org/ws/2004/09/policy"
    xmlns:sp   ="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"&gt;
    &lt;wsp:Policy&gt;
        &lt;wsp:ExactlyOne&gt;
            &lt;sp:Basic256Rsa15 /&gt;
            &lt;sp:TripleDesRsa15 /&gt;
        &lt;/wsp:ExactlyOne&gt;
    &lt;/wsp:Policy&gt;
&lt;/sca:policySet&gt;</programlisting>

      <para>These relationships are illustrated in figure <xref
      linkend="i3097701"/>.</para>

      <figure xml:id="i3097701">
        <title>acme:Encrypted policySet</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentdepth="1.485in"
                       contentwidth="6.198in"
                       fileref="acme-encrypted-policyset.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section xml:id="i3098900">
      <title>policySetReference Element</title>

      <para>A reference to another Policy Set to enable <code>policySet</code>
      elements to be defined in terms of other Policy Sets. The following
      table defines the attribute in a <code>policySetReference</code>
      element.</para>

      <table>
        <title>policySetReference Element</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>QName</code></entry>

              <entry><para>A <code>QName</code> identifying a
              <code>policySet</code> element being referenced. See <xref
              linkend="i3101163"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3101537">
      <title>intentMap Element</title>

      <para>An <code>intentMap</code> element is used to provide additional
      policy information of a qualifier. An <code>intentMap</code> element has
      the following structure:</para>

      <programlisting>intentMap ::= &lt;qualifier&gt;*
qualifier ::= policy ( policy ) *</programlisting>

      <para>See the following table for the <code>intentMap</code> element's
      attribute.</para>

      <para>See <xref linkend="i3072399"/> for more details.</para>

      <table>
        <title>intentMap Element</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Attribute</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>provides</code></entry>

              <entry><code>QName</code></entry>

              <entry><para>Identifying the Intent whose qualifiers are
              configured by this <code>intentMap</code>. The Intent must also
              be listed in the <code>provides</code> attribute of the
              containing <code>policySet</code>. For example,
              <code>confidentiality</code>, and the qualifiers configured by
              the <code>intentMap</code> element, could be
              <code>message</code> and <code>transport</code>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The qualifier sub-element <code>intentMap</code> has an attributes
      as defined in the following table.</para>

      <table>
        <title>qualifier Element</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="0.8*"/>

          <colspec colnum="2" colwidth="1*"/>

          <colspec colnum="3" colwidth="2.2*"/>

          <thead>
            <row>
              <entry>Member</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>name</code></entry>

              <entry><code>xsd:string</code></entry>

              <entry><para>The name of the intent qualifier to which the
              policy applies.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The following example shows a Policy Set that implements the
      <code>confidentiality</code> Intent with two qualifiers
      <code>transport</code> and <code>message</code>.</para>

      <programlisting>&lt;sca:policySet 
    xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"

    name="SecureMessaging"
    provides="confidentiality"
    appliesTo="//binding.ws"&gt;

    &lt;sca:intentMap provides="confidentiality" &gt;
        &lt;sca:qualifier name="transport"&gt;
            &lt;wsp:PolicyAttachment ... /&gt;
        &lt;/sca:qualifier&gt;
        &lt;sca:qualifier name="message"&gt;
            &lt;wsp:PolicyAttachment ... /&gt;
        &lt;/sca:qualifier&gt;
    &lt;/sca:intentMap&gt;
&lt;/sca:policySet&gt;</programlisting>
    </section>
  </section>

  <section>
    <title>Exporting and Importing Services</title>

    <section>
      <title>Service Configuration Properties</title>

      <para>The following properties are used to convey SCA configuration
      information from the service importers and exporters to the Distribution
      Provider. Some rows define property values for properties defined in the
      Remote Services specification, other rows are properties whose names
      follow conventions defined in the Remote Services specification but
      whose specific values are defined in this specification, these are put
      in bold. Because these properties define an additional level of detail
      on the properties specified in Remote Services chapter, any Remote
      Service properties must be supported in conjunction with those defined
      here.</para>

      <table>
        <title>Configuration Properties</title>

        <tgroup cols="3">
          <colspec colnum="1" colwidth="1.8*"/>

          <colspec colnum="2" colwidth="0.8*"/>

          <colspec colnum="3" colwidth="2.5*"/>

          <thead>
            <row>
              <entry>Service Property Name</entry>

              <entry>Type</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><code>remote.configs.supported</code></entry>

              <entry><code>String+</code></entry>

              <entry><para>For the SCA configuration type, this property must
              include the value <code>org.osgi.sca</code></para></entry>
            </row>

            <row>
              <entry><code>remote.intents.supported</code></entry>

              <entry><code>String+</code></entry>

              <entry><para>All supported Intents in their unqualified as well
              as their qualified form.</para></entry>
            </row>

            <row>
              <entry><code>service.exported.configs</code></entry>

              <entry><code>String+</code></entry>

              <entry><para>A list of configuration types that should be used
              to export the service. For the SCA configuration type, this
              property must include the value
              <code>org.osgi.sca</code>.</para></entry>
            </row>

            <row>
              <entry><code>service.imported.configs</code></entry>

              <entry><code>String+</code></entry>

              <entry><para>For the SCA configuration type, this property must
              include the value <code>org.osgi.sca</code>.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.sca.binding</code></entry>

              <entry><code>String+</code></entry>

              <entry><para>Each value is an XML Schema <code>NCName</code> or
              <code>QName</code> identifying an individual Binding. Each
              Binding defines the configuration for an Endpoint. These names
              refer to the internal registry or the scoped configuration. See
              <xref linkend="i3113675"/> and <xref
              linkend="i3114900"/>.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.sca.binding.types</code></entry>

              <entry><code>String+</code></entry>

              <entry><para>Registered by a Distribution Provider to indicate
              the Binding Types supported. The Binding Types must be listed
              with their <code>NCName</code> as well as their
              <code>QName</code>. See <xref
              linkend="i3114242"/>.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.sca.config.url</code></entry>

              <entry><para><code>String+</code></para><para>(optional)</para></entry>

              <entry><para>A URL to an SCA Configuration Document with a
              scoped configuration, see <xref linkend="i3114900"/>. The URL
              must be accessible from the importing framework. If the
              <code>org.osgi.sca.config.xml</code> property is also present,
              then this property must be ignored.</para></entry>
            </row>

            <row>
              <entry><code>org.osgi.sca.config.xml</code></entry>

              <entry><para><code>String</code></para><para>(optional)</para></entry>

              <entry><para>An SCA Configuration Document that provides a
              scoped configuration, see <xref
              linkend="i3114900"/>.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section xml:id="i3106449">
      <title>Complete</title>

      <para>Services can only be imported and exported when their SCA
      Configuration information is <emphasis>complete</emphasis>. This
      information is complete when all necessary named Bindings, Policy Sets,
      and Intents can be found in the internal registry or when scoped, in the
      scoped configuration.</para>

      <para>Complete is dynamic because the life cycles of the donating SCA
      Configuration Bundles are dynamic and starting and stopping bundles can
      cause changes in the internal registry. It is therefore possible that
      the completeness of an exported service or imported Endpoint changes
      over time. The Distribution Provider must ensure that the configuration
      of exports and imports is complete when they are active. If the
      configuration becomes incomplete, then the Distribution Provider must do
      a rebinding based the new configuration situation.</para>
    </section>

    <section xml:id="i3114900">
      <title>Scoped Configurations</title>

      <para>The <code>org.osgi.sca.configs.url</code> or
      <code>org.osgi.sca.config.xml</code> service properties can provide
      <emphasis>scoped</emphasis> SCA Configuration. Scoped configuration is
      additional SCA Configuration over and above the configuration in the
      internal registry.</para>

      <para>This scoped configuration has the following additional
      rules:</para>

      <itemizedlist>
        <listitem>
          <para>Scoped configuration can only contain bindings. It can not
          contain Policy Set or Intent definitions.</para>
        </listitem>

        <listitem>
          <para>Scoped Configurations must never be stored in the internal
          registry, the configuration only applies to the corresponding
          service.</para>
        </listitem>
      </itemizedlist>

      <para>The scoped bindings can refer to the internal registry, it can
      contain more definitions than required, and it can use the same names
      for Bindings but not for Intents, and Policy Sets that reside in the
      internal registry.</para>

      <para>If a named Bindings exists in the internal registry and the scoped
      configuration, then the scoped information takes priority for the
      corresponding service.</para>

      <para>References from the internal registry must not have access to the
      scoped configuration, even if they were referred to from a scoped
      configuration or a service property. For example, a Binding found in the
      internal registry must not have access to an Intent or Policy Set
      defined in the scoped configuration.</para>
    </section>

    <section xml:id="i3092979">
      <title>Registering a Service for Export</title>

      <para>The rules covering the registration of a service for export are
      described in the Remote Service chapter. The SCA Configuration Type adds
      the following conditions that must be met:</para>

      <itemizedlist>
        <listitem>
          <para>The service property <code>service.exported.configs</code>
          must contain the value <code>org.osgi.sca</code>.</para>
        </listitem>

        <listitem>
          <para>The Distribution Provider's internal registry, or a scoped
          configuration, contains complete definitions for all of the Bindings
          referred to the service property <code>org.osgi.sca.bindings</code>.
          Bindings can be referred to by either their <code>NCName</code> or
          <code>QName</code>.</para>
        </listitem>

        <listitem>
          <para>All Intents and/or Policy Sets listed in a supported Binding's
          <code>requires</code> or <code>policySets</code> attributes are part
          of the Distribution Provider's internal registry or, if scoped, in
          the optional scoped configuration.</para>
        </listitem>

        <listitem>
          <para>All Intents must be implemented by the selected Binding Type
          or in an available and applicable Policy Set.</para>
        </listitem>

        <listitem>
          <para>The Endpoint must implement at least all of the Intents listed
          in the <code>service.exported.intents</code>,
          <code>service.exported.intents.extra</code> service properties. The
          Endpoint must also implement the Intents and Policy Sets listed in
          the <code>requires</code> and <code>policySets</code> attributes of
          the used Binding.</para>
        </listitem>
      </itemizedlist>

      <para>For example, if a service were registered with the following
      property:</para>

      <programlisting>service.exported.intents.extra=integrity</programlisting>

      <para>And is then configured with a Binding with the attribute
      <code>requires</code> like:</para>

      <programlisting>&lt;acme:binding.rmi requires="confidentiality"... /&gt;</programlisting>

      <para>Then the Endpoint must implement both the <code>integrity</code>
      and <code>confidentiality</code> Intents.</para>

      <para>A Distribution Provider must create an Endpoint for each of the
      Bindings it supports, including any constraints on Intents and Policy
      Sets; these Bindings must be alternatives. Synonyms are allowed within
      the SCA configuration type and are handled in the same way as synonyms
      from multiple configuration types.</para>
    </section>

    <section xml:id="i3107236">
      <title>Getting an Imported Service</title>

      <para>The Remote Services specification defines the properties which
      must be treated as special when the Endpoint for an exported service is
      imported as an OSGi service in another framework. An imported service
      configured with the SCA Configuration Type must also have the following
      properties:</para>

      <itemizedlist>
        <listitem>
          <para><code>service.imported.configs</code> - Contains the
          configuration types that can be used to import this service. This
          must include the <code>org.osgi.sca</code> value. Any other types
          included must be synonymous and therefore refer to exactly the same
          Endpoint as the <code>org.osgi.sca</code> configuration.</para>
        </listitem>

        <listitem>
          <para><code>org.osgi.sca.bindings</code> - Names Bindings from the
          internal registry for a specific Endpoint. If multiple Bindings are
          listed in this property then they must be synonyms for the same
          Endpoint. The named bindings can refer to the internal registry or
          the scoped bindings.</para>
        </listitem>

        <listitem>
          <para>A Distribution Provider can optionally list the scoped
          configuration for this service with the
          <code>org.osgi.sca.configs.url</code> or
          <code>org.osgi.configs.xml</code> service properties, see <xref
          linkend="i3114900"/>.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="i3114242">
      <title>Dependencies</title>

      <para>A bundle that uses the SCA Configuration Type has an implicit
      dependency on the Distribution Provider to support that type. To make
      this dependency explicit, the Distribution Provider must register a
      service with the following property and value</para>

      <programlisting>remote.configs.supported=org.osgi.sca</programlisting>

      <para>A Distribution Provider must also list other configuration types
      it supports in addition to <code>org.osgi.sca</code>, the type of this
      property is <code>String+</code>.</para>

      <para>A bundle that uses a specific Binding Type also has an implicit
      dependency on a Distribution Provider that supports this type. To make
      this dependency explicit, the Distribution Provider must register a
      service property with the name:</para>

      <programlisting>org.osgi.sca.binding.types</programlisting>

      <para>The value must be set to the list of Binding Types supported by
      the Distribution Provider. This property is of type
      <code>String+</code>. This property must list both the
      <code>NCName</code> and the <code>QName</code> for each Binding Types it
      supports.</para>

      <para>For example</para>

      <programlisting>org.osgi.sca.binding.types = [binding.ws,«
      {http://docs.oasis-open.org/ns/opencsa/sca/200912}binding.ws,«
      binding.rmi, «
      {http://acme.com/defs}binding.rmi]</programlisting>
    </section>
  </section>

  <section>
    <title>SCA and Remote Service Admin</title>

    <para>The <xref linkend="service.remoteserviceadmin"/> provides an API for
    the Distribution Provider; it enables a topology manager to import and
    export services. A discovery mechanism is also provided to discover
    <emphasis>Endpoint Descriptions</emphasis> through different protocols.
    Endpoint Descriptions are property based and provide the details for a
    specific Endpoint. Using these properties it must be possible to create a
    connection to the corresponding Endpoint and import a service, if the used
    configuration type is recognized. The Endpoint Description properties are
    typically set by the Remote Service Admin that created the Endpoint and
    describe the Endpoint details to importers of that Endpoint.</para>

    <para>The Endpoint Description is therefore extensible for different
    configuration types. This section describes the mapping of the SCA
    Configuration Type into the Endpoint Description. This mapping must be
    used by any Remote Service Admin that supports the SCA Configuration Type.
    The properties and values specified here are in addition to those defined
    in the <xref linkend="service.remoteserviceadmin"/>.</para>

    <section>
      <title>Configuration</title>

      <para>An Endpoint Description is moved between systems and can therefore
      not refer to an internal registry. However, the SCA Configuration Type
      allows scoped configurations, see, see <xref linkend="i3114900"/>.
      Scoped configurations allow the Endpoint Description to describe all the
      necessary Bindings, Policy Sets, and Intents.</para>

      <para>Scoped configuration can be provided through:</para>

      <itemizedlist>
        <listitem>
          <para><code>org.osgi.sca.configs.url</code> - A URL to an SCA
          Configuration Document. This URL must be accessible by an importing
          framework.</para>
        </listitem>

        <listitem>
          <para><code>org.osgi.sca.config.xml</code> - Embedded XML contained
          in the property. The embedded XML is supported with the
          <code>String</code> data type for properties and using an
          <code>xml</code> element to define it.</para>
        </listitem>
      </itemizedlist>

      <para>When a Remote Service Admin service creates an Endpoint
      Description it must ensure that at least a complete SCA Configuration
      for that Endpoint is included in that Endpoint Description as either a
      URL or embedded XML.</para>

      <para>A Remote Service Admin must recognize the scoped configuration in
      the properties used to create an Import Registration or an Export
      Registration.</para>
    </section>

    <section>
      <title>Example Endpoint Description</title>

      <para>The following example shows how a remote <code>Foo</code> service
      is described using the Endpoint Description XML format, including the
      SCA configuration type configuration. In this example, the embedded form
      is chosen.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;rsa:endpoint-descriptions 
    xmlns:rsa="http://www.osgi.org/xmlns/rsa/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;endpoint-description&gt;
        &lt;property name="objectClass" value ="com.acme.Foo"/&gt;
        &lt;property name="service.intents" value="confidentiality" /&gt;
        &lt;property name="service.imported.configs" value="org.osgi.sca"/&gt;
        &lt;property name="org.osgi.sca.bindings" type="String"&gt;
            &lt;array&gt;
                &lt;value&gt;FooWS&lt;/value&gt;
                &lt;value&gt;{http://acme.com/defs}FooRMI&lt;/value&gt;
            &lt;/array&gt;
        &lt;/property&gt;
        &lt;property name="org.osgi.sca.config.xml" type="String"&gt;
            &lt;xml&gt;
                &lt;scact:sca-config targetNamespace="http://acme.com/defs"
                    xmlns:scact="http://www.osgi.org/xmlns/scact/v1.0.0"
                    xmlns:sca="http://docs.oasis-open.org/ns/opencsa/sca/200912"
                    xmlns:acme="http://acme.com/defs"&gt;
                    &lt;sca:binding.ws name="FooWS"
                        uri="http://acme.com/Foo" requires="sca:soap.v1_2" /&gt;
                    &lt;acme:binding.rmi name="FooRMI"
                        host="acme.com" port="8099" serviceName="Foo" /&gt;
                    &lt;sca:intent&gt;
                        ...
                    &lt;/sca:intent&gt;
                    &lt;sca:policySet&gt;
                        ...
                    &lt;/sca:policySet&gt;
                    &lt;/scact:sca-config&gt;
             &lt;/xml&gt;
        &lt;/property&gt;
    &lt;/endpoint-description&gt;
&lt;/rsa:endpoint-descriptions&gt;</programlisting>
    </section>
  </section>

  <section xml:id="i3091466">
    <title>XML Schema</title>

    <para>Below is the full XML schema for the SCA Configuration Documents
    used by the SCA Configuration Type. The namespace for this XML Schema
    is:</para>

    <programlisting>http://www.osgi.org/xmlns/scact/v1.0.0</programlisting>

    <programlisting role="pgwide"><xi:include encoding="utf-8"
        href="../../generated/xmlns/scact/v1.0.0/scact.xsd" parse="text"/></programlisting>
  </section>

  <section>
    <title>Security</title>

    <para>There are no extra security rules for this specification.</para>
  </section>

  <section>
    <title>References</title>

    <bibliolist>
      <bibliomixed
      xml:id="i3074222"><title>OASIS</title><biblioid class="uri"><link
      xlink:href="http://www.oasis-open.org"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3072184"><title>Service Component Architecture
      (SCA)</title><biblioid class="uri"><link
      xlink:href="http://www.oasis-opencsa.org/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3072278"><title>SCA Assembly specification v1.1
      CD03</title><biblioid class="uri"><link
      xlink:href="http://docs.oasis-open.org/opencsa/sca-assembly/sca-assembly-1.1-spec.pdf"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3072399"><title>SCA Policy Framework specification
      v1.1
      CD02</title><biblioid class="uri"><link
      xlink:href="http://docs.oasis-open.org/opencsa/sca-policy/sca-policy-1.1-spec-cd02.pdf"/></biblioid><?line-break ?><biblioid class="uri"><link
      xlink:href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=sca-policy"/></biblioid></bibliomixed>

      <bibliomixed><title>SCA Bindings
      specifications</title><biblioid class="uri"><link
      xlink:href="http://www.oasis-open.org/committees/sca-bindings/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3073536"><title>WS-Policy
      specification</title><biblioid class="uri"><link
      xlink:href="http://www.w3.org/Submission/WS-Policy/"/></biblioid></bibliomixed>

      <bibliomixed xml:id="i3102308"><title>XML
      Schema</title><biblioid class="uri"><link
      xlink:href="http://www.w3.org/XML/Schema"/></biblioid></bibliomixed>
    </bibliolist>
  </section>
</chapter>
